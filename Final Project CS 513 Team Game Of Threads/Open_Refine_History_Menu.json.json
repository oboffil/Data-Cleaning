[
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column notes using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "notes",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column notes using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "notes",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column keywords using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "keywords",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column keywords using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "keywords",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column language using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "language",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column language using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "language",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column date using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "date",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column date using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "date",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location_type using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location_type",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location_type using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location_type",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column currency using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "currency",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column currency using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "currency",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column currency_symbol using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "currency_symbol",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column currency using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "currency",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column currency_symbol using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "currency_symbol",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column currency_symbol using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "currency_symbol",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column status using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "status",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column status using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "status",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column id using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "id",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column page_count using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "page_count",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column dish_count using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "dish_count",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column sponsor_case at index 3 based on column sponsor using expression grel:value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "sponsor_case",
    "columnInsertIndex": 3,
    "baseColumnName": "sponsor",
    "expression": "grel:value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor_case using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor_case",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column event_case at index 5 based on column event using expression grel:value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "event_case",
    "columnInsertIndex": 5,
    "baseColumnName": "event",
    "expression": "grel:value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event_case using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event_case",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column venue_case at index 7 based on column venue using expression grel:value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "venue_case",
    "columnInsertIndex": 7,
    "baseColumnName": "venue",
    "expression": "grel:value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue_case using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue_case",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column occasion_case at index 11 based on column occasion using expression grel:value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "occasion_case",
    "columnInsertIndex": 11,
    "baseColumnName": "occasion",
    "expression": "grel:value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion_case using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion_case",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column date using expression value.toDate()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "date",
    "expression": "value.toDate()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column sponsor_cluster at index 4 based on column sponsor_case using expression grel:value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "sponsor_cluster",
    "columnInsertIndex": 4,
    "baseColumnName": "sponsor_case",
    "expression": "grel:value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor_cluster",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor_cluster",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line - Antwerpen - Ny",
          "Red Star Line - Antwerpen Ny",
          "Red Star Line - Antwerpen -ny",
          "Red Star Line -antwerpen Ny",
          "Red Star Line -antwerpen - Ny",
          "Red Star Line -antwerpen -ny",
          "Red Star Line- Antwerpen -ny",
          "Red Star Line- Antwerpen Ny"
        ],
        "to": "Red Star Line - Antwerpen - NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Norddeutscher Lloyd Bremen",
          "Norddeutscher Lloyd - Bremen",
          "Norddeutscher Lloyd Bremen;",
          "Norddeutscher Lloyd, Bremen",
          "Bremen Norddeutscher Lloyd",
          "Norddeutscher Lloyd -bremen"
        ],
        "to": "Norddeutscher Lloyd Bremen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fifth Avenue Hotel",
          "(fifth Avenue Hotel)",
          "(fifth Avenue Hotel?)",
          "Fifth Avenue Hotel (?)",
          "(fifth Avenue Hotel?}",
          "Fifth Avenue Hotel;"
        ],
        "to": "Fifth Avenue Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Colonial Hotel",
          "Hotel Colonial",
          "(?colonial Hotel?)",
          "(colonial Hotel)"
        ],
        "to": "Colonial Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "[restaurant Name And/or Location Not Given]",
          "Restaurant Name And/or Location Not Given]",
          "Restaurant Name And/or Location Not Given",
          "[restaurant Name And/or Location Not Given"
        ],
        "to": "Restaurant Name And/or Location Not Given"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Childs",
          "Childs'",
          "Child's"
        ],
        "to": "Childs"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nordeutscher Lloyd Bremen",
          "Nordeutscher Lloyd, Bremen",
          "Nordeutscher Lloyd - Bremen"
        ],
        "to": "Nordeutscher Lloyd Bremen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Alta Vista Hotel",
          "(alta Vista Hotel)",
          "Alta Vista Hotel (?)"
        ],
        "to": "Alta Vista Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Gramercy Park Hotel",
          "Hotel Gramercy Park",
          "Gramercy Park Hotel; Hotel Gramercy Park"
        ],
        "to": "Gramercy Park Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(engineers Club)",
          "Engineers Club",
          "Engineers' Club"
        ],
        "to": "Engineers' Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Paquebot \\liberté\\\"\"",
          "Paquebot Liberte",
          "Paquebot \\liberte\\\"\""
        ],
        "to": "Paquebot Liberte"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hamburg Amerika Linie",
          "Hamburg - Amerika Linie",
          "Hamburg- Amerika Linie"
        ],
        "to": "Hamburg - Amerika Linie"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Riggs'",
          "Rigg's",
          "Riggs"
        ],
        "to": "Rigg's"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Edward F. Lang's Ladies And Gents Lunch Room And Restaurant",
          "Edward F. Lang's Ladies' And Gent's Lunch Room And Restaurant",
          "Edward F. Lang's Ladies' And Gent's Lunch Room And Restaurant;"
        ],
        "to": "Edward F. Lang's Ladies' And Gent's Lunch Room And Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Knickerbocker",
          "Hotel Knickerbocker (?)",
          "Knickerbocker Hotel"
        ],
        "to": "Hotel Knickerbocker"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf-astoria",
          "(waldorf-astoria?)",
          "(waldorf-astoria)"
        ],
        "to": "Waldorf - Astoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Majestic",
          "(majestic Hotel)",
          "Majestic Hotel"
        ],
        "to": "Hotel Majestic"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line",
          "(red Star Line)",
          "Red Star Line -"
        ],
        "to": "Red Star Line"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.M.S.",
          "Usms",
          "U.S.M.S"
        ],
        "to": "U.S.M.S."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.M.S. New York",
          "Usms New York",
          "U.S.M.S New York"
        ],
        "to": "U.S.M.S. New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonicos",
          "Delmonico's",
          "Delmonicos."
        ],
        "to": "Delmonicos"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Merchant's Club",
          "The Merchants Club",
          "The Merchants' Club"
        ],
        "to": "The Merchant's Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Merchants' Club",
          "Merchant's Club",
          "Merchants Club"
        ],
        "to": "Merchants' Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Denis Hotel",
          "Hotel St. Denis",
          "St, Denis Hotel"
        ],
        "to": "St. Denis Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Imperial Hotel",
          "Hotel Imperial",
          "Impérial Hotel"
        ],
        "to": "Imperial Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grand Hotel Royal",
          "Grand Hôtel Royal",
          "Royal Grand Hotel"
        ],
        "to": "Grand Hotel Royal"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "American Medical Editors' Association",
          "American Medical Editor's Association",
          "American Medical Editors Association"
        ],
        "to": "American Medical Editors' Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha - S.S.Kobe Maru",
          "Nippon Yusen Kaisha -s.S.Kobe Maru"
        ],
        "to": "Nippon Yusen Kaisha - S.S.Kobe Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Metropole",
          "Metropole Hotel"
        ],
        "to": "Hotel Metropole"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. American Shipper",
          "S.S. \"american Shipper\"\"\""
        ],
        "to": "S.S. American Shipper"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha - S.S.Kasuga",
          "Nippon Yusen Kaisha -s.S.Kasuga"
        ],
        "to": "Nippon Yusen Kaisha - S.S.Kasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Company - Sonoma",
          "Oceanic Steamship Company _ Sonoma"
        ],
        "to": "Oceanic Steamship Company - Sonoma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Merchant's Club Of Chicago",
          "The Merchants Club Of Chicago"
        ],
        "to": "The Merchant's Club Of Chicago"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wabash Railway Company",
          "Wabash [railway Company]"
        ],
        "to": "Wabash Railway Company"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Friendly Sons Of St. Patrick",
          "Friendly Sons Of St Patrick"
        ],
        "to": "Friendly Sons Of St. Patrick"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Europäischer Hof",
          "Hotel Europaischer Hof"
        ],
        "to": "Hotel Europäischer Hof"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cie Gle Transatlantique",
          "Cie. Gle. Transatlantique"
        ],
        "to": "Cie Gle Transatlantique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "De L'ange Hotel",
          "Hotel De L'ange"
        ],
        "to": "De L'ange Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Rigg's Twentieth Street Restaurant",
          "Riggs' Twentieth Street Restaurant"
        ],
        "to": "Rigg's Twentieth Street Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "King Frederik Viii",
          "(king Frederik Viii)"
        ],
        "to": "King Frederik Viii"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ancient And Honorable Artillery Co Of Massachusetts",
          "Ancient And Honorable Artillery Co. Of Massachusetts"
        ],
        "to": "Ancient And Honorable Artillery Co Of Massachusetts"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The New Willard Hotel",
          "The New Willard Hotel."
        ],
        "to": "The New Willard Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Co. - Sierra",
          "Oceanic Steamship Co.- Sierra"
        ],
        "to": "Oceanic Steamship Co. - Sierra"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Francis Hotel",
          "Hotel St. Francis"
        ],
        "to": "St. Francis Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Society Of Colonial Wars In The State Of New York",
          "Society Of The Society Of Colonial Wars In The State Of New York"
        ],
        "to": "Society Of Colonial Wars In The State Of New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(king Alexander Of Servia)",
          "King Alexander Of Servia"
        ],
        "to": "King Alexander Of Servia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Association Of New York City",
          "(hotel Association Of New York City)"
        ],
        "to": "Hotel Association Of New York City"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Compagnie Generale Transatlantique",
          "Compagnie Générale Transatlantique"
        ],
        "to": "Compagnie Generale Transatlantique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Muhlenkamper Fahrhaus",
          "Mühlenkamper Fährhaus"
        ],
        "to": "Muhlenkamper Fahrhaus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Childs' Lunch Rooms",
          "Child's Lunch Rooms"
        ],
        "to": "Childs' Lunch Rooms"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Co. - S.S.Zealandia",
          "Oceanic Steamship Co. S.S.Zealandia"
        ],
        "to": "Oceanic Steamship Co. - S.S.Zealandia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Manhattan",
          "Manhattan Hotel"
        ],
        "to": "Hotel Manhattan"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Victory",
          "Victory Hotel"
        ],
        "to": "Hotel Victory"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(club)",
          "? Club"
        ],
        "to": "Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Grunewald",
          "Grunewald Hotel"
        ],
        "to": "Hotel Grunewald"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Algazar",
          "Algazar Hotel"
        ],
        "to": "Hotel Algazar"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fairmont Hotel",
          "Hotel Fairmont"
        ],
        "to": "Fairmont Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Alcazar Hotel",
          "Hotel Alcazar"
        ],
        "to": "Alcazar Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafe Savarin",
          "Café Savarin"
        ],
        "to": "Cafe Savarin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Nicholas Hotel",
          "Hotel St. Nicholas"
        ],
        "to": "St. Nicholas Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Colorado",
          "Colorado Hotel"
        ],
        "to": "Hotel Colorado"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cosmopolitan Hotel",
          "Cosmopolitan... Hotel"
        ],
        "to": "Cosmopolitan Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Colombo Hotel",
          "Hotel Colombo"
        ],
        "to": "Colombo Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(maharaja Of Baroda)",
          "Maharaja Of Baroda"
        ],
        "to": "Maharaja Of Baroda"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Palace Hotel",
          "Palace Hôtel"
        ],
        "to": "Palace Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ancient Accepted Scottish Rite",
          "Ancient & Accepted Scottish Rite"
        ],
        "to": "Ancient Accepted Scottish Rite"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "La Crépe",
          "La Crêpe"
        ],
        "to": "La Crépe"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Company -s.S.Zealander",
          "Oceanic Steamship Company - S.S.Zealander"
        ],
        "to": "Oceanic Steamship Company -s.S.Zealander"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pirate's House",
          "Pirates' House"
        ],
        "to": "Pirate's House"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Michigan Society Of The Sons Of The American Revolution",
          "Michigan Society Sons Of The American Revolution"
        ],
        "to": "Michigan Society Of The Sons Of The American Revolution"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Merchant's Club Of Boston",
          "Merchants' Club Of Boston"
        ],
        "to": "Merchant's Club Of Boston"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Second Panel Sheriff's Jury",
          "Sheriff's Jury Second Panel"
        ],
        "to": "Second Panel Sheriff's Jury"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Elks Club House",
          "Elks' Club House"
        ],
        "to": "Elks Club House"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Du Musee",
          "Hotel Du Musee'"
        ],
        "to": "Hotel Du Musee"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line - S.S.Westernland",
          "Red Star Line S.S.Westernland"
        ],
        "to": "Red Star Line - S.S.Westernland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Tavern On The Green",
          "The Tavern On The Green"
        ],
        "to": "Tavern On The Green"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Minot",
          "Minot Hotel"
        ],
        "to": "Hotel Minot"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "[restaurant And/or Location Not Given.]",
          "[restaurant And/or Location Not Given]"
        ],
        "to": "Restaurant And/or Location Not Given"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S New Amsterdam",
          "S.S. New Amsterdam"
        ],
        "to": "S.S New Amsterdam"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Sherry's",
          "Sherrys"
        ],
        "to": "Sherry's"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ambassador Hotel",
          "Hotel Ambassador"
        ],
        "to": "Ambassador Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bristol Hotel",
          "Hotel Bristol"
        ],
        "to": "Bristol Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Schwarzwalder's Natur Weinhaus",
          "Schwarzwalders Natur Weinhaus"
        ],
        "to": "Schwarzwalder's Natur Weinhaus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(private)",
          "Private"
        ],
        "to": "Private"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Commodore Hotel",
          "The Hotel Commodore"
        ],
        "to": "The Commodore Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Algonquin Hotel",
          "Hotel Algonquin"
        ],
        "to": "Algonquin Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Worthy",
          "Worthy Hotel"
        ],
        "to": "Hotel Worthy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Willard's Hotel",
          "Willards Hotel"
        ],
        "to": "Willard's Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grand Ballroom Of The Hotel Plaza",
          "The Grand Ballroom Of The Hotel Plaza"
        ],
        "to": "Grand Ballroom Of The Hotel Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Canadian Pacific Railway Co. - S.S.Athabasca",
          "Canadian Pacific Railway Co.- S.S.Athabasca"
        ],
        "to": "Canadian Pacific Railway Co. - S.S.Athabasca"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Century Club",
          "(century Club?)"
        ],
        "to": "Century Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Astor",
          "Astor Hotel"
        ],
        "to": "Hotel Astor"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(emperor Nicholas Ii",
          "Emperor Nicholas Ii"
        ],
        "to": "Emperor Nicholas II"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Chamberlin",
          "Chamberlin Hotel"
        ],
        "to": "Hotel Chamberlin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grocers Hall",
          "Grocers' Hall"
        ],
        "to": "Grocers Hall"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Continental Hotel",
          "Hotel Continental"
        ],
        "to": "Continental Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York Central System",
          "[new York Central System]"
        ],
        "to": "New York Central System"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Northern Steamship Company/great Northern Ry Line.",
          "(northern Steamship Company/great Northern Ry Line.)"
        ],
        "to": "Northern Steamship Company/great Northern Ry Line."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wisconsin Society - Sons Of The American Revolution",
          "Wisconsin Society Sons Of The American Revolution"
        ],
        "to": "Wisconsin Society - Sons Of The American Revolution"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "King Edward Vii",
          "(king Edward Vii)"
        ],
        "to": "King Edward VII"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Regis Hotel",
          "Hotel St. Regis"
        ],
        "to": "St. Regis Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Netherland",
          "Netherland Hotel"
        ],
        "to": "Hotel Netherland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St.Regis Hotel",
          "Hotel St.Regis"
        ],
        "to": "St. Regis Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Charles Hotel",
          "St Charles Hotel"
        ],
        "to": "St. Charles Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Society Of Sons Of The Revolution In The State Of Missouri",
          "Society Sons Of The Revolution In The State Of Missouri"
        ],
        "to": "Society Of Sons Of The Revolution In The State Of Missouri"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf Astoria",
          "Waldorf- Astoria"
        ],
        "to": "Waldorf Astoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Empire",
          "Empire Hotel"
        ],
        "to": "Hotel Empire"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Reuben's",
          "Reuben's."
        ],
        "to": "Reuben's"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Paquebot \\france\\\"\"",
          "Paquebot France"
        ],
        "to": "Paquebot France"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Royal Palm Hotel",
          "Hotel Royal Palm"
        ],
        "to": "Royal Palm Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(english Hotel Restaurant)",
          "English Hotel Restaurant"
        ],
        "to": "English Hotel Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "George Washington Hotel",
          "Hotel George Washington"
        ],
        "to": "George Washington Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.G.(?)",
          "Rg"
        ],
        "to": "R.G."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Manhattan Club",
          "(manhattan Club)"
        ],
        "to": "Manhattan Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Columbia Hotel",
          "Hotel Columbia"
        ],
        "to": "Columbia Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. Oceanic",
          "Rms Oceanic"
        ],
        "to": "R.M.S. Oceanic"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New Grand Hotel",
          "Grand New Hotel"
        ],
        "to": "New Grand Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Hotel Plaza",
          "The Plaza Hotel"
        ],
        "to": "The Hotel Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafe De Paris",
          "Café De Paris"
        ],
        "to": "Cafe De Paris"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Xiii Club",
          "Club Xiii"
        ],
        "to": "XIII Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Lafayette",
          "Lafayette Hotel"
        ],
        "to": "Hotel Lafayette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Empire State Society Of Sons Of The American Revolution",
          "Empire State Society Sons Of The American Revolution"
        ],
        "to": "Empire State Society Of Sons Of The American Revolution"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Lüchow's Restaurant",
          "Luchow's Restaurant"
        ],
        "to": "Lüchow's Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pennsylvania",
          "Pennsylvania Hotel"
        ],
        "to": "Hotel Pennsylvania"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Savoy",
          "Savoy Hotel"
        ],
        "to": "Hotel Savoy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Dennis",
          "Dennis Hotel"
        ],
        "to": "Hotel Dennis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. Parthia",
          "R.M.S. \"parthia\"\"\""
        ],
        "to": "R.M.S. Parthia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Café Lafayette",
          "Cafe Lafayette"
        ],
        "to": "Café Lafayette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Mouquin Restaurant And Wine Co",
          "Mouquin Restaurant And Wine Co."
        ],
        "to": "Mouquin Restaurant And Wine Co"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Imperial",
          "Imperial (?)"
        ],
        "to": "Imperial"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. Minnetonka",
          "S.S. \"minnetonka\"\"\""
        ],
        "to": "S.S. Minnetonka"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Commodore",
          "Commodore Hotel"
        ],
        "to": "Hotel Commodore"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Usms St Louis",
          "U.S.M.S. St. Louis"
        ],
        "to": "Usms St Louis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Winthrop",
          "Winthrop Hotel"
        ],
        "to": "Hotel Winthrop"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Meyer's Hotel",
          "Meyers Hotel"
        ],
        "to": "Meyer's Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(238 Eight Avenue)",
          "238 Eight Avenue"
        ],
        "to": "238 Eight Avenue"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Phonix",
          "Phonix Hotel"
        ],
        "to": "Hotel Phonix"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Harvard Club",
          "(harvard Club)"
        ],
        "to": "Harvard Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Jefferson",
          "Jefferson Hotel"
        ],
        "to": "Hotel Jefferson"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Smith & Mcnell's",
          "Smith & Mcnells"
        ],
        "to": "Smith & Mcnell's"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel D'angleterre",
          "D'angleterre Hotel"
        ],
        "to": "Hotel D'angleterre"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union Club",
          "(union Club)"
        ],
        "to": "Union Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. \"queen Mary\"\"\"",
          "R.M.S. \\queen Mary\\\"\""
        ],
        "to": "R.M.S. Queen Mary"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "American Legation",
          "(american Legation)"
        ],
        "to": "American Legation"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Claremont",
          "Claremont Hotel"
        ],
        "to": "Hotel Claremont"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Del Coronado",
          "Del Coronado Hotel"
        ],
        "to": "Hotel Del Coronado"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafe Boulevard",
          "Café Boulevard"
        ],
        "to": "Cafe Boulevard"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Champlain",
          "Champlain Hotel"
        ],
        "to": "Hotel Champlain"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. \\mauretania\\\"\"",
          "R.M.S. Mauretania"
        ],
        "to": "R.M.S. Mauretania"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Met-life Building",
          "Metlife Building"
        ],
        "to": "Metlife Building"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. \"frederik Viii\"",
          "S.S. Frederik Viii"
        ],
        "to": "S.S. Frederik VIII"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ballroom, The Plaza",
          "The Plaza Ballroom"
        ],
        "to": "The Plaza Ballroom"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Menzies Hotel",
          "Menzie's Hotel"
        ],
        "to": "Menzies Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "American Bankers Association",
          "American Bankers' Association"
        ],
        "to": "American Bankers Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(king Umberto)",
          "King Umberto"
        ],
        "to": "King Umberto"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "King Haakon Vii",
          "(king Haakon Vii)"
        ],
        "to": "King Haakon VII"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Brevoort Restaurant",
          "Restaurant Brevoort"
        ],
        "to": "Brevoort Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Promenade Café",
          "Cafe Promenade"
        ],
        "to": "Promenade Café"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Company - Sierra",
          "Oceanic Steamship Company -sierra"
        ],
        "to": "Oceanic Steamship Company - Sierra"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. \"ile De France\"\"\"",
          "S.S. Ile De France"
        ],
        "to": "S.S. Ile De France"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Master Printers Association",
          "Master Printers' Association"
        ],
        "to": "Master Printers Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wärdshuset Stallmästaregarden",
          "Wärdshuset Stallmästaregården"
        ],
        "to": "Wärdshuset Stallmästaregarden"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Restaurant Mayan",
          "Mayan Restaurant"
        ],
        "to": "Restaurant Mayan"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Military Order Of The Loyal Legion Of The United States Commandery Of The State Of Minnesota",
          "Military Order Of The Loyal Legion Of The United States. Commandery Of The State Of Minnesota"
        ],
        "to": "Military Order Of The Loyal Legion Of The United States Commandery Of The State Of Minnesota"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Adams' Restaurant",
          "Adam's Restaurant"
        ],
        "to": "Adam's Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New England Society In The City Of New York",
          "The New England Society In The City Of New York"
        ],
        "to": "New England Society In The City Of New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grenoble Hotel",
          "Hotel Grenoble"
        ],
        "to": "Grenoble Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "\\the Manor\\\"\"",
          "The Manor"
        ],
        "to": "The Manor"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Penn. Rr - Pullman Dining Car Service",
          "Penn Rr - Pullman Dining Car Service"
        ],
        "to": "Penn. RR - Pullman Dining Car Service"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Santa Fe Route",
          "Santa Fe' Route"
        ],
        "to": "Santa Fe Route"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(harvard University)",
          "Harvard University"
        ],
        "to": "Harvard University"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Alpha Kappa Kappa",
          "Kappa Alpha"
        ],
        "to": "Alpha Kappa Kappa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Windsor Hotel",
          "Hotel Windsor"
        ],
        "to": "Windsor Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Toyo Kisen Kaisha - Hong Kong Maru",
          "Toyo Kisen Kaisha -hong Kong Maru"
        ],
        "to": "Toyo Kisen Kaisha - Hong Kong Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel National",
          "National Hotel"
        ],
        "to": "Hotel National"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Marie Antoinette",
          "Marie Antoinette Hotel"
        ],
        "to": "Hotel Marie Antoinette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Quisisana",
          "Quisisana Hotel"
        ],
        "to": "Hotel Quisisana"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(fifth Ave. Hotel)",
          "Fifth Ave. Hotel"
        ],
        "to": "Fifth Ave. Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York Central System, Boston & Albany Railroad",
          "Boston & Albany Railroad , New York Central System"
        ],
        "to": "New York Central System, Boston & Albany Railroad"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copley Plaza Hotel",
          "Hotel Copley Plaza"
        ],
        "to": "Copley Plaza Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Old Guard Albany Zouave Cadets",
          "Albany Zouave Cadets - Old Guard"
        ],
        "to": "Old Guard Albany Zouave Cadets"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York Central & Hudson River R.R.",
          "New York Central & Hudson River R.R.."
        ],
        "to": "New York Central & Hudson River R.R."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. George's Society",
          "St. Georges Society"
        ],
        "to": "St. George's Society"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "San Remo Hotel",
          "Hotel San Remo"
        ],
        "to": "San Remo Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Shanley's",
          "Shanleys"
        ],
        "to": "Shanley's"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Le Dome Of The Four Seasons",
          "Le Dôme Of The Four Seasons"
        ],
        "to": "Le Dome Of The Four Seasons"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bankers' Club Of Chicago",
          "Bankers Club Of Chicago"
        ],
        "to": "Bankers' Club Of Chicago"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fraunces' Tavern",
          "Fraunces Tavern"
        ],
        "to": "Fraunces' Tavern"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha - S.S.Nasuga",
          "Nippon Yusen Kaisha -s.S.Nasuga"
        ],
        "to": "Nippon Yusen Kaisha - S.S.Nasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(king Christian Ix Of Denmark)",
          "King Christian Ix Of Denmark"
        ],
        "to": "King Christian IX Of Denmark"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafeteria Lunch",
          "Cafeteria - Lunch"
        ],
        "to": "Cafeteria Lunch"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel St. George",
          "St. George Hotel"
        ],
        "to": "Hotel St. George"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Le Café Chambord",
          "Le Cafe Chambord"
        ],
        "to": "Le Café Chambord"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Co. - Sonoma",
          "Oceanic Steamship Co. _ Sonoma"
        ],
        "to": "Oceanic Steamship Co. - Sonoma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Associated Pioneers Of The Territorial Days Of California",
          "The Associated Pioneers Of The Territorial Days Of California"
        ],
        "to": "The Associated Pioneers Of The Territorial Days Of California"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Plaza",
          "Plaza Hotel"
        ],
        "to": "Plaza Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "York Hotel",
          "Hotel York"
        ],
        "to": "York Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Royal",
          "Royal Hotel"
        ],
        "to": "Royal Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Vendome",
          "Vendome Hotel"
        ],
        "to": "Vendome Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cie Transatlantique",
          "Cie Cie Transatlantique"
        ],
        "to": "Cie Transatlantique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Us Army - Subsistence Dept.",
          "U.S. Army - Subsistence Dept."
        ],
        "to": "U.S. Army - Subsistence Dept."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Martinique",
          "Martinique Hotel"
        ],
        "to": "Hotel Martinique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel New Weston",
          "New Weston Hotel"
        ],
        "to": "New Weston Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copley-plaza Hotel",
          "Hotel Copley-plaza"
        ],
        "to": "Copley-plaza Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha - S.S.Kinshin Maru",
          "Nippon Yusen Kaisha -s.S.Kinshin Maru"
        ],
        "to": "Nippon Yusen Kaisha - S.S.Kinshin Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Victoria",
          "Victoria Hotel"
        ],
        "to": "Hotel Victoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ponce De Leon Hotel",
          "Hotel Ponce De Leon"
        ],
        "to": "Ponce De Leon Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(american Line)",
          "American Line"
        ],
        "to": "American Line"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pontchartrain",
          "Pontchartrain Hotel"
        ],
        "to": "Hotel Pontchartrain"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Lexington",
          "Lexington Hotel"
        ],
        "to": "Hotel Lexington"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Revelstoke",
          "Revelstoke Hotel"
        ],
        "to": "Hotel Revelstoke"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha - S.S. Kasuga",
          "Nippon Yusen Kaisha -ss Kasuga"
        ],
        "to": "Nippon Yusen Kaisha - S.S. Kasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Roanoke",
          "Roanoke Hotel"
        ],
        "to": "Hotel Roanoke"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union League Club",
          "(union League Club)"
        ],
        "to": "Union League Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Des Indes Hotel",
          "Hotel Des Indes"
        ],
        "to": "Des Indes Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Baltimore Hotel",
          "Hotel Baltimore"
        ],
        "to": "Baltimore Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Westminster Hotel",
          "Hotel Westminster"
        ],
        "to": "Westminster Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Statler",
          "Statler Hotel"
        ],
        "to": "Hotel Statler"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Profile House And Hotel Vendome",
          "Hotel Vendome And Profile House"
        ],
        "to": "Profile House And Hotel Vendome"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.S. New York",
          "U.S.S. New York (?)"
        ],
        "to": "U.S.S. New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Gallatin Hotel",
          "Hotel Gallatin"
        ],
        "to": "Gallatin Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hofbrau Haus",
          "Hofbräu Haus"
        ],
        "to": "Hofbrau Haus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New England Shorthand Reporter's Association",
          "New England Shorthand Reporters' Association"
        ],
        "to": "New England Shorthand Reporters' Association"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor_cluster",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor_cluster",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf Astoria",
          "Waldorf - Astoria"
        ],
        "to": "Waldorf Astoria"
      }
    ]
  },
  {
    "op": "core/column-addition",
    "description": "Create column event_cluster at index 7 based on column event_case using expression grel:value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "event_cluster",
    "columnInsertIndex": 7,
    "baseColumnName": "event_case",
    "expression": "grel:value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event_cluster",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event_cluster",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Daily Menu, Dinner",
          "Daily Dinner Menu",
          "Daily Menu; Dinner"
        ],
        "to": "Daily Dinner Menu"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "A La Carte; Dinner",
          "Dinner A La Carte",
          "Dinner; A La Carte"
        ],
        "to": "Dinner A La Carte"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Washington's Birthday Banquet",
          "Banquet (washington's Birthday?)"
        ],
        "to": "Washington's Birthday Banquet"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Breakfast (?) Held By Nordeutscher Lloyd Bremen At On Board The Ss George Washington",
          "Breakfast Held By Nordeutscher Lloyd Bremen At On Board The Ss George Washington"
        ],
        "to": "Breakfast Held By Nordeutscher Lloyd Bremen At On Board The SS George Washington"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Daily Lunch;",
          "Daily Lunch"
        ],
        "to": "Daily Lunch"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Daily Menu, Luncheon",
          "Daily Luncheon Menu"
        ],
        "to": "Daily Luncheon Menu"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event_cluster",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event_cluster",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Dinner",
          "[dinner]",
          "(dinner)",
          "Dinner;",
          "Dinner (?)",
          "Dinner(?)",
          "[dinner?]",
          "(?dinner?)",
          "Dinner,",
          "Dinner?",
          "[?dinner?]",
          "[dinner ?]"
        ],
        "to": "Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Lunch",
          "[lunch]",
          "(?lunch?)",
          "Lunch;",
          "[lunch?]",
          "(lunch)",
          "Lunch (?)",
          "Lunch."
        ],
        "to": "Lunch"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Breakfast",
          "[breakfast]",
          "Breakfast;",
          "Breakfast (?)",
          "Breakfast(?)",
          "[breakfast ?]"
        ],
        "to": "Breakfast"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Daily Menu",
          "(daily Menu)",
          "Daily Menu;",
          "[daily Menu?]",
          "[daily] Menu"
        ],
        "to": "Daily Menu"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Supper",
          "Supper (?)",
          "Supper(?)",
          "Supper;"
        ],
        "to": "Supper"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Carte Du Jour",
          "(carte Du Jour)",
          "Carte Du Jour;"
        ],
        "to": "Carte Du Jour"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Lunch & Dinner",
          "Lunch; Dinner",
          "[?dinner? - Lunch?]"
        ],
        "to": "Lunch & Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fruhstuck-breakfast",
          "Fruhstuck/breakfast",
          "Fruhstuck/breakfast;"
        ],
        "to": "Fruhstuck-Breakfast"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Daily Lunch Menu",
          "Daily Menu, Lunch",
          "Daily Menu; Lunch"
        ],
        "to": "Daily Lunch Menu"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Lunch Or Dinner",
          "Dinner Or Lunch",
          "Lunch &/or Dinner"
        ],
        "to": "Lunch Or Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Luncheon",
          "[luncheon]",
          "Luncheon;"
        ],
        "to": "Luncheon"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Anniversary Dinner",
          "Anniversary Dinner?",
          "Anniversary [dinner]"
        ],
        "to": "Anniversary Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Mittagessen",
          "Mittag-essen",
          "Mittagessen;"
        ],
        "to": "Mittagessen-Lunch"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Inspection Trip - Luncheon",
          "Inspection Trip, Luncheon",
          "Inspection Trip, Luncheon;"
        ],
        "to": "Inspection Trip - Luncheon"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Banquet And Reception",
          "Reception And Banquet"
        ],
        "to": "Banquet And Reception"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Table D'hote Dinner",
          "Dinner Table D'hote"
        ],
        "to": "Table D'hote Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Afternoon Tea",
          "Afternoon Tea ["
        ],
        "to": "Afternoon Tea"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Dinner - Second Cabin",
          "Dinner Second Cabin"
        ],
        "to": "Dinner - Second Cabin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Inspection Trip, Dinner",
          "Inspection Trip, Dinner;"
        ],
        "to": "Inspection Trip, Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Mittagessen/dinner",
          "Mittagessen[dinner]"
        ],
        "to": "Mittagessen-Lunch/Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wine List",
          "Wine List;"
        ],
        "to": "Wine List"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Dinner,second Cabin",
          "Dinner-second Cabin"
        ],
        "to": "Dinner, Second Cabin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Reunion",
          "[?reunion?]"
        ],
        "to": "Reunion"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Luncheon Table D'hote",
          "Table D'hote Luncheon"
        ],
        "to": "Luncheon Table D'hote"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ladies Night",
          "Ladies' Night"
        ],
        "to": "Ladies Night"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Breakfast And Supper",
          "Supper And Breakfast"
        ],
        "to": "Breakfast And Supper"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wedding",
          "Wedding(?)"
        ],
        "to": "Wedding"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Reception",
          "[reception]"
        ],
        "to": "Reception"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Abend-essen",
          "Abendessen"
        ],
        "to": "Abendessen/Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Menu",
          "Menu;"
        ],
        "to": "Menu"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Annual Dinner",
          "[annual Dinner?]"
        ],
        "to": "Annual Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Diner",
          "[diner]"
        ],
        "to": "Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Dinner To Above",
          "Dinner To Above;"
        ],
        "to": "Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Luncheon A La Carte",
          "Luncheon, A La Carte"
        ],
        "to": "Luncheon A La Carte"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Lincoln's Birthday Dinner",
          "Dinner, Lincolns Birthday"
        ],
        "to": "Lincoln's Birthday Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New Year's Dinner",
          "New Years Dinner"
        ],
        "to": "New Year's Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fifth Annual Dinner",
          "Dinner, Fifth Annual"
        ],
        "to": "Fifth Annual Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Valentine's Day Dinner",
          "St. Valentines Day Dinner"
        ],
        "to": "St. Valentine's Day Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fruhstuck/lunch",
          "Fruhstuck-lunch"
        ],
        "to": "Fruhstuck-Breakfast/Lunch"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New Year's Day Dinner",
          "New Years Day Dinner"
        ],
        "to": "New Year's Day Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Eighth Annual Banquet",
          "Eighth Annual Banquet'"
        ],
        "to": "Eighth Annual Banquet"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Daily Menu, Breakfast",
          "Daily Breakfast Menu"
        ],
        "to": "Daily Menu, Breakfast"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Private Dinner",
          "[private Dinner?]"
        ],
        "to": "Private Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Inspection Trip, Breakfast",
          "Inspection Trip - Breakfast"
        ],
        "to": "Inspection Trip, Breakfast"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Mittagessen - Dinner",
          "Mittagessen [dinner]"
        ],
        "to": "Mittagessen-Lunch/Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Lunch-dinner",
          "Lunch;dinner"
        ],
        "to": "Lunch/Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Middag/dinner",
          "Middag-dinner"
        ],
        "to": "Middag/Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Daily Bill Of Fare",
          "Daily Bill Of Fare;"
        ],
        "to": "Daily Bill Of Fare"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event_cluster",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event_cluster",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Dinner - Second Cabin",
          "Dinner, Second Cabin"
        ],
        "to": "Dinner - Second Cabin"
      }
    ]
  },
  {
    "op": "core/column-addition",
    "description": "Create column venue_cluster at index 10 based on column venue_case using expression grel:value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "venue_cluster",
    "columnInsertIndex": 10,
    "baseColumnName": "venue_case",
    "expression": "grel:value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue_cluster",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue_cluster",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Soc;",
          "Soc",
          "[soc?];",
          "Soc(?);",
          "Soc.",
          "[soc]",
          "Soc?;",
          "(soc);",
          "(soc?)",
          "(soc?);",
          "Soc (?);",
          "Soc(?):",
          "[?soc];",
          "[soc;]",
          "[soc?]",
          "[soc];"
        ],
        "to": "Soc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Govt;",
          "Govt(?);",
          "Gov't;",
          "[govt?];",
          "Gov't",
          "Gov't.",
          "Govt",
          "Govt?;",
          "[govt?]",
          "[govt];"
        ],
        "to": "Govt"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Com",
          "Com.",
          "[com]",
          "(com?);",
          "Com(?);",
          "Com.;",
          "[com?];",
          "[com}"
        ],
        "to": "Com"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Prof;",
          "Prof",
          "Prof(?);",
          "Prof.",
          "Prof?;",
          "[prof?];",
          "[prof]"
        ],
        "to": "Prof"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Educ;",
          "Educ",
          "Educ (?);",
          "[educ];",
          "(educ);",
          "[educ?];"
        ],
        "to": "Educ"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pol;",
          "Pol",
          "[pol]",
          "Pol.;",
          "[pol?);",
          "[pol?]"
        ],
        "to": "Pol"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nav;",
          "Nav; (?)",
          "Nav.",
          "Nav",
          "Nav(?);"
        ],
        "to": "Nav"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Mil;",
          "Mil",
          "Mil (?);",
          "Mil.",
          "[mil?];"
        ],
        "to": "Mil"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other;(private);",
          "Other,(private);",
          "Other,private",
          "Other;private;",
          "[other;private];"
        ],
        "to": "Other: Private"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Patr;",
          "Patr",
          "Patr(?);",
          "Patr."
        ],
        "to": "Patr"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Comm",
          "Comm.",
          "Comm;",
          "Comm;."
        ],
        "to": "Comm"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other (private Party);",
          "Other (private Party)",
          "Other (private Party?)",
          "Other (private Party?);"
        ],
        "to": "Other: Private Party"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Relig;",
          "Relig",
          "Relig?;"
        ],
        "to": "Relig"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other (private Club)",
          "Other (private Club);",
          "Other [private Club?]"
        ],
        "to": "Other: Private Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Gov;",
          "Gov.",
          "[gov];"
        ],
        "to": "Gov"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Naval",
          "Naval;",
          "[naval]"
        ],
        "to": "Naval"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Social",
          "Social;",
          "(social?)"
        ],
        "to": "Social"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "?",
          "[?]"
        ],
        "to": "?"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pol; Soc;",
          "Soc; Pol;"
        ],
        "to": "Pol; Soc;"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other (club);",
          "Other (club)"
        ],
        "to": "Other: Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Social Club",
          "Social Club?"
        ],
        "to": "Social Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other",
          "Other;"
        ],
        "to": "Other"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other;(personal);",
          "Other(personal);"
        ],
        "to": "Other: Personal"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Foreign",
          "Foreign;"
        ],
        "to": "Foreign"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other (private);",
          "Other [private];"
        ],
        "to": "Other: Private"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Military",
          "[military]"
        ],
        "to": "Military"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pat;",
          "Pat"
        ],
        "to": "Pat"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(educational)",
          "Educational;"
        ],
        "to": "Educational"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Patriotic",
          "Patriotic?"
        ],
        "to": "Patriotic"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Private;",
          "(private);"
        ],
        "to": "Private"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Private Party",
          "Private Party;"
        ],
        "to": "Private Party"
      }
    ]
  },
  {
    "op": "core/column-addition",
    "description": "Create column occasion_cluster at index 15 based on column occasion_case using expression grel:value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "occasion_cluster",
    "columnInsertIndex": 15,
    "baseColumnName": "occasion_case",
    "expression": "grel:value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion_cluster",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion_cluster",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Compl.",
          "[compl?];",
          "Compl?;",
          "[compl];",
          "Compl (?);",
          "Compl(?);",
          "Compl;(?)",
          "[compl.]",
          "[compl]"
        ],
        "to": "Compl"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other (soc);",
          "Other (soc?);",
          "Other (soc?)",
          "Other (soc)",
          "Other [soc?];",
          "Other (soc.)",
          "Other )soc);",
          "Other [soc]",
          "Other, [soc?];"
        ],
        "to": "Other: Soc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Anniversary;",
          "Anniversary (?);",
          "Anniversary(?);",
          "Anniversary",
          "Anniversary.",
          "Anniversary?"
        ],
        "to": "Anniversary"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Secular Holiday;",
          "Secular Holiday",
          "Secular Holiday. Holiday",
          "Secular Holiday. Holiday;",
          "Secular Holiday Holiday;",
          "Secular Holiday Holiday"
        ],
        "to": "Secular Holiday"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other (anniversary);",
          "Other (anniversary)",
          "Other (anniversary?)",
          "Other - Anniversary",
          "Other {anniversary};"
        ],
        "to": "Anniversary"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "[anniv?];",
          "(anniv);",
          "(anniv?);",
          "[?anniv?];",
          "[anniv?]"
        ],
        "to": "Anniversary"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Soc;",
          "[soc?]",
          "(soc?)",
          "[soc]",
          "(soc);"
        ],
        "to": "Soc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other (meeting);",
          "Other (meeting)",
          "Other (meeting?);",
          "Other (meeting?)"
        ],
        "to": "Other: Meeting"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other (social?)",
          "Other (social);",
          "Other (social?);",
          "Other [social];"
        ],
        "to": "Other: Social"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other (annual Event)",
          "Other (annual Event);",
          "Other {annual Event};",
          "Other, Annual Event"
        ],
        "to": "Other: Annual Event"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Patriotic Holiday;",
          "Patriotic Holiday",
          "Patriotic Holiday.",
          "Patriotic Holiday. Holiday"
        ],
        "to": "Patriotic Holiday"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Rite;",
          "Rite",
          "(rite)",
          "(rite);"
        ],
        "to": "Rite"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other (commemorative);",
          "Other (commemorative)",
          "Other (commemorative?)",
          "Other [commemorative]"
        ],
        "to": "Other: Commemorative"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Daily;",
          "Daily",
          "[daily]",
          "Daily?;"
        ],
        "to": "Daily"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "?",
          ";",
          "[?]"
        ],
        "to": "?"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Annual",
          "Annual;",
          "[annual]"
        ],
        "to": "Annual"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Secular Holiday.Holiday",
          "Secular Holiday.Holiday;",
          "Secular Holiday;holiday"
        ],
        "to": "Secular Holiday"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Daily Menu;",
          "Daily Menu",
          "(daily Menu)"
        ],
        "to": "Daily Menu"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other (anniv)",
          "Other (anniv);",
          "Other (anniv?)"
        ],
        "to": "Anniversary"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other",
          "Other;",
          "Other,"
        ],
        "to": "Other"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Relig. Holiday",
          "Relig. Holiday;",
          "Relig Holiday;"
        ],
        "to": "Religious Holiday"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(social)",
          "(social?)",
          "Social"
        ],
        "to": "Social"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "[?reunion?];",
          "[re-union]",
          "[reunion]"
        ],
        "to": "Reunion"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Annual Event",
          "Annual Event;"
        ],
        "to": "Annual Event"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Aniv;",
          "[aniv?];"
        ],
        "to": "Anniversary"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other (reunion);",
          "(other - Reunion?);"
        ],
        "to": "Reunion"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other (daily Dated Menu);",
          "Other (dated Daily Menu);"
        ],
        "to": "Other: Daily Dated Menu"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pol;",
          "[pol?]"
        ],
        "to": "Pol."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other (daily Menu);",
          "Other (daily Menu)"
        ],
        "to": "Other: Daily Menu"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Saturday Dinner",
          "Saturday Dinner;"
        ],
        "to": "Saturday Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "National Event",
          "National Event;"
        ],
        "to": "National Event"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pat;",
          "Pat"
        ],
        "to": "Pat."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other (commemoative)",
          "Other (commemoative);"
        ],
        "to": "Other: Commemorative"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Daily Meal",
          "Daily Meal;"
        ],
        "to": "Daily Meal"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Dinner",
          "Dinner;"
        ],
        "to": "Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Sunday Dinner",
          "Sunday Dinner;"
        ],
        "to": "Sunday Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ethnic Holiday",
          "[ethnic Holiday]"
        ],
        "to": "Ethnic Holiday"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Sunday",
          "Sunday;"
        ],
        "to": "Sunday"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Breakfast",
          "Breakfast;"
        ],
        "to": "Breakfast"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other (annual Meeting);",
          "Other {annual Meeting};"
        ],
        "to": "Other: Annual Meeting"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Banquet;",
          "Banquet"
        ],
        "to": "Banquet"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Eth;",
          "Eth"
        ],
        "to": "Eth."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Anniversaryersary",
          "Anniversaryersary;"
        ],
        "to": "anniversary"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Other (daily);",
          "Other (daily)"
        ],
        "to": "Other: Daily"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Daily Dinner",
          "Daily Dinner;"
        ],
        "to": "Daily Dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Semi-annual",
          "Semi-annual;"
        ],
        "to": "Semi-annual"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Annual Dinner",
          "Annual Dinner;"
        ],
        "to": "Annual Dinner"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion_cluster",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion_cluster",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Anniversary",
          "anniversary"
        ],
        "to": "Anniversary"
      }
    ]
  },
  {
    "op": "core/column-addition",
    "description": "Create column location_cluster at index 22 based on column location using expression grel:value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "location_cluster",
    "columnInsertIndex": 22,
    "baseColumnName": "location",
    "expression": "grel:value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column location_cluster",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location_cluster",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "[Restaurant name and/or location not given]",
          "[Restaurant Name And/Or Location Not Given]",
          "Restaurant name and/or location not given]",
          "Restaurant name and/or location not given",
          "[Restaurant name and/or location not given"
        ],
        "to": "Restaurant name and/or location not given"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Norddeutscher Lloyd Bremen",
          "Norddeutscher Lloyd, Bremen",
          "Bremen Norddeutscher Lloyd",
          "Norddeutscher Lloyd Bremen;"
        ],
        "to": "Norddeutscher Lloyd Bremen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fifth Avenue Hotel",
          "Fifth Avenue Hotel (?)",
          "Fifth Avenue Hotel?",
          "(Fifth Avenue Hotel?}"
        ],
        "to": "Fifth Avenue Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Childs",
          "Childs'",
          "Child's"
        ],
        "to": "Childs"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Gramercy Park Hotel",
          "Hotel Gramercy Park",
          "Gramercy Park Hotel; Hotel Gramercy Park"
        ],
        "to": "Gramercy Park Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Riggs'",
          "Rigg's",
          "Riggs"
        ],
        "to": "Riggs'"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Edward F. Lang's Ladies And Gents Lunch Room And Restaurant",
          "Edward F. Lang's Ladies' And Gent's Lunch Room And Restaurant",
          "Edward F. Lang's Ladies' And Gent's Lunch Room And Restaurant;"
        ],
        "to": "Edward F. Lang's Ladies And Gents Lunch Room And Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Knickerbocker",
          "Hotel Knickerbocker (?)",
          "Knickerbocker Hotel"
        ],
        "to": "Hotel Knickerbocker"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.M.S.",
          "Usms",
          "U.S.M.S"
        ],
        "to": "U.S.M.S."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.M.S. New York",
          "Usms New York",
          "U.S.M.S New York"
        ],
        "to": "U.S.M.S. New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonicos",
          "Delmonico's",
          "Delmonicos."
        ],
        "to": "Delmonicos"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Merchant's Club",
          "The Merchants Club",
          "The Merchants' Club"
        ],
        "to": "The Merchant's Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Merchant's Club",
          "Merchants' Club",
          "Merchants Club"
        ],
        "to": "The Merchant's Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Denis Hotel",
          "Hotel St. Denis",
          "St, Denis Hotel"
        ],
        "to": "St. Denis Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Imperial",
          "Imperial Hotel",
          "Impérial Hotel"
        ],
        "to": "Hotel Imperial"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "American Medical Editor's Association",
          "American Medical Editors' Association",
          "American Medical Editors Association"
        ],
        "to": "American Medical Editor's Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Metropole",
          "Metropole Hotel"
        ],
        "to": "Hotel Metropole"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. American Shipper",
          "S.S. \"American Shipper\"\"\""
        ],
        "to": "S.S. American Shipper"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Merchant's Club Of Chicago",
          "The Merchants Club Of Chicago"
        ],
        "to": "The Merchant's Club Of Chicago"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nordeutscher Lloyd Bremen",
          "Nordeutscher Lloyd, Bremen"
        ],
        "to": "Nordeutscher Lloyd Bremen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wabash Railway Company",
          "Wabash [Railway Company]"
        ],
        "to": "Wabash Railway Company"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Alta Vista Hotel",
          "Alta Vista Hotel (?)"
        ],
        "to": "Alta Vista Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Friendly Sons Of St. Patrick",
          "Friendly Sons Of St Patrick"
        ],
        "to": "Friendly Sons Of St. Patrick"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cie Gle Transatlantique",
          "Cie. Gle. Transatlantique"
        ],
        "to": "Cie Gle Transatlantique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Chamber Of Commerce",
          "Chamber of Commerce"
        ],
        "to": "Chamber Of Commerce"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "De L'ange Hotel",
          "Hotel De L'ange"
        ],
        "to": "De L'ange Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Rigg's Twentieth Street Restaurant",
          "Riggs' Twentieth Street Restaurant"
        ],
        "to": "Rigg's Twentieth Street Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ancient And Honorable Artillery Co Of Massachusetts",
          "Ancient And Honorable Artillery Co. Of Massachusetts"
        ],
        "to": "Ancient And Honorable Artillery Co. Of Massachusetts"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The New Willard Hotel",
          "The New Willard Hotel."
        ],
        "to": "The New Willard Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Francis Hotel",
          "Hotel St. Francis"
        ],
        "to": "St. Francis Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Society Of Colonial Wars In The State Of New York",
          "Society Of The Society Of Colonial Wars In The State Of New York"
        ],
        "to": "Society Of Colonial Wars In The State Of New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Laurel In The Pines",
          "Laurel in the Pines"
        ],
        "to": "Laurel In The Pines"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Muhlenkamper Fahrhaus",
          "Mühlenkamper Fährhaus"
        ],
        "to": "Muhlenkamper Fahrhaus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Del Prado Hotel",
          "Hotel Del Prado"
        ],
        "to": "Del Prado Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Childs' Lunch Rooms",
          "Child's Lunch Rooms"
        ],
        "to": "Childs' Lunch Rooms"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Engineers Club",
          "Engineers' Club"
        ],
        "to": "Engineers Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Manhattan",
          "Manhattan Hotel"
        ],
        "to": "Hotel Manhattan"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Healy's Forty-second Street restaurant",
          "Healy's Forty-second Street Restaurant"
        ],
        "to": "Healy's Forty-second Street restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Republican Club Of The City Of New York",
          "Republican Club of the City of New York"
        ],
        "to": "Republican Club Of The City Of New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Victory",
          "Victory Hotel"
        ],
        "to": "Hotel Victory"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "? Club",
          "Club"
        ],
        "to": "Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Paquebot \\Liberté\\\"\"",
          "Paquebot Liberte"
        ],
        "to": "Paquebot Liberte"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Grunewald",
          "Grunewald Hotel"
        ],
        "to": "Hotel Grunewald"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fairmont Hotel",
          "Hotel Fairmont"
        ],
        "to": "Fairmont Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Alcazar",
          "Alcazar Hotel"
        ],
        "to": "Hotel Alcazar"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafe Savarin",
          "Café Savarin"
        ],
        "to": "Cafe Savarin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Nicholas Hotel",
          "Hotel St. Nicholas"
        ],
        "to": "St. Nicholas Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Colorado",
          "Colorado Hotel"
        ],
        "to": "Hotel Colorado"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cosmopolitan Hotel",
          "Cosmopolitan... Hotel"
        ],
        "to": "Cosmopolitan Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Colombo",
          "Colombo Hotel"
        ],
        "to": "Hotel Colombo"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Palace Hotel",
          "Palace Hôtel"
        ],
        "to": "Palace Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ancient Accepted Scottish Rite",
          "Ancient & Accepted Scottish Rite"
        ],
        "to": "Ancient & Accepted Scottish Rite"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pirate's House",
          "Pirates' House"
        ],
        "to": "Pirate's House"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Michigan Society Of The Sons Of The American Revolution",
          "Michigan Society Sons Of The American Revolution"
        ],
        "to": "Michigan Society Of The Sons Of The American Revolution"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Merchant's Club Of Boston",
          "Merchants' Club Of Boston"
        ],
        "to": "Merchant's Club Of Boston"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Second Panel Sheriff's Jury",
          "Sheriff's Jury Second Panel"
        ],
        "to": "Second Panel Sheriff's Jury"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Elks Club House",
          "Elks' Club House"
        ],
        "to": "Elks Club House"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Du Musee",
          "Hotel Du Musee'"
        ],
        "to": "Hotel Du Musee"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Tavern On The Green",
          "The Tavern On The Green"
        ],
        "to": "Tavern On The Green"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Minot Hotel",
          "Hotel Minot"
        ],
        "to": "Minot Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "[Restaurant And/Or Location Not Given.]",
          "[Restaurant And/Or Location Not Given]"
        ],
        "to": "Restaurant And/Or Location Not Given"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Kempinski Restaurant",
          "Restaurant Kempinski"
        ],
        "to": "Kempinski Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S New Amsterdam",
          "S.S. New Amsterdam"
        ],
        "to": "S.S New Amsterdam"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Sherry's",
          "Sherrys"
        ],
        "to": "Sherry's"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ambassador Hotel",
          "Hotel Ambassador"
        ],
        "to": "Ambassador Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bristol Hotel",
          "Hotel Bristol"
        ],
        "to": "Bristol Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Schwarzwalder's Natur Weinhaus",
          "Schwarzwalders Natur Weinhaus"
        ],
        "to": "Schwarzwalder's Natur Weinhaus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Commodore Hotel",
          "The Hotel Commodore"
        ],
        "to": "The Commodore Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Algonquin Hotel",
          "Hotel Algonquin"
        ],
        "to": "Algonquin Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Worthy",
          "Worthy Hotel"
        ],
        "to": "Hotel Worthy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Majestic",
          "Majestic Hotel"
        ],
        "to": "Hotel Majestic"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Willard's Hotel",
          "Willards Hotel"
        ],
        "to": "Willard's Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grand Ballroom Of The Hotel Plaza",
          "The Grand Ballroom Of The Hotel Plaza"
        ],
        "to": "Grand Ballroom Of The Hotel Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Century Club",
          "Century Club?"
        ],
        "to": "Century Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Astor",
          "Astor Hotel"
        ],
        "to": "Hotel Astor"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Chamberlin",
          "Chamberlin Hotel"
        ],
        "to": "Hotel Chamberlin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grocers Hall",
          "Grocers' Hall"
        ],
        "to": "Grocers Hall"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Continental Hotel",
          "Hotel Continental"
        ],
        "to": "Continental Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Mercantile Lunch Co.",
          "Mercantile lunch Co."
        ],
        "to": "Mercantile Lunch Co."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York Central System",
          "[New York Central System]"
        ],
        "to": "New York Central System"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Colonial Hotel",
          "Hotel Colonial"
        ],
        "to": "Colonial Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel St. Regis",
          "St. Regis Hotel"
        ],
        "to": "Hotel St. Regis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Netherland",
          "Netherland Hotel"
        ],
        "to": "Hotel Netherland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St.Regis Hotel",
          "Hotel St.Regis"
        ],
        "to": "St.Regis Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Charles Hotel",
          "St Charles Hotel"
        ],
        "to": "St. Charles Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Velvet",
          "Velvet Hotel"
        ],
        "to": "Hotel Velvet"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Society Of Sons Of The Revolution In The State Of Missouri",
          "Society Sons Of The Revolution In The State Of Missouri"
        ],
        "to": "Society Of Sons Of The Revolution In The State Of Missouri"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf Astoria",
          "Waldorf Astoria?"
        ],
        "to": "Waldorf Astoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Empire Hotel",
          "Hotel Empire"
        ],
        "to": "Empire Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Reuben's",
          "Reuben's."
        ],
        "to": "Reuben's"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Paquebot \\France\\\"\"",
          "Paquebot France"
        ],
        "to": "Paquebot France"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Royal Palm Hotel",
          "Hotel Royal Palm"
        ],
        "to": "Royal Palm Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "George Washington Hotel",
          "Hotel George Washington"
        ],
        "to": "George Washington Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.G.(?)",
          "Rg"
        ],
        "to": "R.G."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Columbia Hotel",
          "Hotel Columbia"
        ],
        "to": "Columbia Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. Oceanic",
          "Rms Oceanic"
        ],
        "to": "R.M.S. Oceanic"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel DuPont",
          "Hotel duPont"
        ],
        "to": "Hotel DuPont"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New Grand Hotel",
          "Grand New Hotel"
        ],
        "to": "New Grand Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Hotel Plaza",
          "The Plaza Hotel"
        ],
        "to": "The Hotel Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafe De Paris",
          "Café de Paris"
        ],
        "to": "Cafe De Paris"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Xiii Club",
          "Club Xiii"
        ],
        "to": "XIII Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Place Viger Hotel",
          "Hotel Place Viger"
        ],
        "to": "Place Viger Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Lafayette",
          "Lafayette Hotel"
        ],
        "to": "Hotel Lafayette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Empire State Society Of Sons Of The American Revolution",
          "Empire State Society Sons Of The American Revolution"
        ],
        "to": "Empire State Society Of Sons Of The American Revolution"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pennsylvania",
          "Pennsylvania Hotel"
        ],
        "to": "Hotel Pennsylvania"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Savoy",
          "Savoy Hotel"
        ],
        "to": "Hotel Savoy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Dennis",
          "Dennis Hotel"
        ],
        "to": "Hotel Dennis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. Parthia",
          "R.M.S. \"Parthia\"\"\""
        ],
        "to": "R.M.S. Parthia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Café Lafayette",
          "Cafe Lafayette"
        ],
        "to": "Café Lafayette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Mouquin Restaurant And Wine Co",
          "Mouquin Restaurant And Wine Co."
        ],
        "to": "Mouquin Restaurant And Wine Co"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Imperial",
          "Imperial (?)"
        ],
        "to": "Imperial"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. Minnetonka",
          "S.S. \"Minnetonka\"\"\""
        ],
        "to": "S.S. Minnetonka"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Commodore",
          "Commodore Hotel"
        ],
        "to": "Hotel Commodore"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "[Not Given]",
          "[Not given]"
        ],
        "to": "Not Given"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Usms St Louis",
          "U.S.M.S. St. Louis"
        ],
        "to": "U.S.M.S. St. Louis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Winthrop",
          "Winthrop Hotel"
        ],
        "to": "Hotel Winthrop"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Meyer's Hotel",
          "Meyers Hotel"
        ],
        "to": "Meyer's Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Phonix",
          "Phonix Hotel"
        ],
        "to": "Hotel Phonix"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Biltmore",
          "Biltmore Hotel"
        ],
        "to": "Hotel Biltmore"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Jefferson",
          "Jefferson Hotel"
        ],
        "to": "Hotel Jefferson"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Smith & Mcnell's",
          "Smith & Mcnells"
        ],
        "to": "Smith & Mcnell's"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel D'angleterre",
          "D'angleterre Hotel"
        ],
        "to": "Hotel D'angleterre"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. \"Queen Mary\"\"\"",
          "R.M.S. \\Queen Mary\\\"\""
        ],
        "to": "R.M.S. Queen Mary"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Claremont Hotel",
          "Hotel Claremont"
        ],
        "to": "Claremont Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Del Coronado",
          "Del Coronado Hotel"
        ],
        "to": "Hotel Del Coronado"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafe Boulevard",
          "Café Boulevard"
        ],
        "to": "Cafe Boulevard"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Champlain",
          "Champlain Hotel"
        ],
        "to": "Hotel Champlain"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. \\Mauretania\\\"\"",
          "R.M.S. Mauretania"
        ],
        "to": "R.M.S. Mauretania"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Met-Life Building",
          "MetLife Building"
        ],
        "to": "MetLife Building"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. \"Frederik VIII\"",
          "S.S. Frederik VIII"
        ],
        "to": "S.S. Frederik VIII"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Eastman",
          "Eastman Hotel"
        ],
        "to": "Hotel Eastman"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ballroom, The Plaza",
          "The Plaza Ballroom"
        ],
        "to": "The Plaza Ballroom"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Menzie's Hotel",
          "Menzies Hotel"
        ],
        "to": "Menzie's Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "American Bankers Association",
          "American Bankers' Association"
        ],
        "to": "American Bankers Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Brevoort Restaurant",
          "Restaurant Brevoort"
        ],
        "to": "Brevoort Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Promenade Café",
          "Cafe Promenade"
        ],
        "to": "Promenade Cafe"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Walton's Old Homestead Oyster and Chop House",
          "Walton's Old Homestead Oyster And Chop House"
        ],
        "to": "Walton's Old Homestead Oyster and Chop House"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. \"Ile De France\"\"\"",
          "S.S. Ile De France"
        ],
        "to": "S.S. Ile De France"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Master Printers' Association",
          "Master Printers Association"
        ],
        "to": "Master Printers' Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Restaurant Mayan",
          "Mayan Restaurant"
        ],
        "to": "Restaurant Mayan"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Military Order Of The Loyal Legion Of The United States Commandery Of The State Of Minnesota",
          "Military Order Of The Loyal Legion Of The United States. Commandery Of The State Of Minnesota"
        ],
        "to": "Military Order Of The Loyal Legion Of The United States Commandery Of The State Of Minnesota"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Castleton Hotel",
          "Hotel Castleton"
        ],
        "to": "Castleton Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Adams' Restaurant",
          "Adam's Restaurant"
        ],
        "to": "Adams' Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New England Society In The City Of New York",
          "The New England Society In The City Of New York"
        ],
        "to": "New England Society In The City Of New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grenoble Hotel",
          "Hotel Grenoble"
        ],
        "to": "Grenoble Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Penn Rr Pullman Dining Car Service",
          "Penn. Rr Pullman Dining Car Service"
        ],
        "to": "Penn. RR Pullman Dining Car Service"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Santa Fe Route",
          "Santa Fe' Route"
        ],
        "to": "Santa Fe Route"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Alpha Kappa Kappa",
          "Kappa Alpha"
        ],
        "to": "Alpha Kappa Kappa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "National Cooper's Association",
          "National Coopers Association"
        ],
        "to": "National Cooper's Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Windsor Hotel",
          "Hotel Windsor"
        ],
        "to": "Windsor Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Mouquin Restaurant and Wine Co.",
          "The Mouquin Restaurant And Wine Co."
        ],
        "to": "The Mouquin Restaurant and Wine Co."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel National",
          "National Hotel"
        ],
        "to": "Hotel National"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Marie Antoinette",
          "Marie Antoinette Hotel"
        ],
        "to": "Hotel Marie Antoinette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Quisisana",
          "Quisisana Hotel"
        ],
        "to": "Hotel Quisisana"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "United States Government",
          "United States Government?"
        ],
        "to": "United States Government"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York Central System, Boston & Albany Railroad",
          "Boston & Albany Railroad , New York Central System"
        ],
        "to": "New York Central System, Boston & Albany Railroad"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copley Plaza Hotel",
          "Hotel Copley Plaza"
        ],
        "to": "Copley Plaza Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Albany Zouave Cadets Old Guard",
          "Old Guard Albany Zouave Cadets"
        ],
        "to": "Albany Zouave Cadets Old Guard"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York Central & Hudson River R.R.",
          "New York Central & Hudson River R.R.."
        ],
        "to": "New York Central & Hudson River R.R."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. George's Society",
          "St. Georges Society"
        ],
        "to": "St. George's Society"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "San Remo Hotel",
          "Hotel San Remo"
        ],
        "to": "San Remo Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Shanley's",
          "Shanleys"
        ],
        "to": "Shanley's"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fraunces' Tavern",
          "Fraunces Tavern"
        ],
        "to": "Fraunces' Tavern"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel St. George",
          "St. George Hotel"
        ],
        "to": "Hotel St. George"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grand Hotel Royal",
          "Royal Grand Hotel"
        ],
        "to": "Grand Hotel Royal"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Associated Pioneers Of The Territorial Days Of California",
          "The Associated Pioneers Of The Territorial Days Of California"
        ],
        "to": "Associated Pioneers Of The Territorial Days Of California"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Plaza",
          "Plaza Hotel"
        ],
        "to": "Hotel Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "York Hotel",
          "Hotel York"
        ],
        "to": "York Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Royal",
          "Royal Hotel"
        ],
        "to": "Hotel Royal"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Vendome",
          "Vendome Hotel"
        ],
        "to": "Hotel Vendome"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cie Transatlantique",
          "Cie Cie Transatlantique"
        ],
        "to": "Cie Transatlantique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S. Army Subsistence Dept.",
          "Us Army Subsistence Dept."
        ],
        "to": "U.S. Army Subsistence Dept."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Martinique",
          "Martinique Hotel"
        ],
        "to": "Hotel Martinique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel New Weston",
          "New Weston Hotel"
        ],
        "to": "Hotel New Weston"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copley-Plaza Hotel",
          "Hotel Copley-Plaza"
        ],
        "to": "Copley-Plaza Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Victoria",
          "Victoria Hotel"
        ],
        "to": "Hotel Victoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Ponce De Leon",
          "Ponce De Leon Hotel"
        ],
        "to": "Hotel Ponce De Leon"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pontchartrain",
          "Pontchartrain Hotel"
        ],
        "to": "Hotel Pontchartrain"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Lexington",
          "Lexington Hotel"
        ],
        "to": "Hotel Lexington"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Revelstoke Hotel",
          "Hotel Revelstoke"
        ],
        "to": "Revelstoke Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha S.S. Kasuga",
          "Nippon Yusen Kaisha Ss Kasuga"
        ],
        "to": "Nippon Yusen Kaisha S.S. Kasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pacific Mail S.S. Co.",
          "Pacific Mail Ss Co."
        ],
        "to": "Pacific Mail S.S. Co."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Roanoke Hotel",
          "Hotel Roanoke"
        ],
        "to": "Roanoke Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Des Indes Hotel",
          "Hotel Des Indes"
        ],
        "to": "Des Indes Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Baltimore Hotel",
          "Hotel Baltimore"
        ],
        "to": "Baltimore Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Westminster",
          "Westminster Hotel"
        ],
        "to": "Hotel Westminster"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Statler",
          "Statler Hotel"
        ],
        "to": "Hotel Statler"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Vendome And Profile House",
          "Profile House And Hotel Vendome"
        ],
        "to": "Hotel Vendome And Profile House"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.S. New York",
          "U.S.S. New York (?)"
        ],
        "to": "U.S.S. New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Gallatin Hotel",
          "Hotel Gallatin"
        ],
        "to": "Gallatin Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hofbrau Haus",
          "Hofbräu Haus"
        ],
        "to": "Hofbrau Haus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New England Shorthand Reporters' Association",
          "New England Shorthand Reporter's Association"
        ],
        "to": "New England Shorthand Reporters' Association"
      }
    ]
  },
  {
    "op": "core/column-addition",
    "description": "Create column currency_cluster at index 25 based on column currency using expression grel:value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "currency_cluster",
    "columnInsertIndex": 25,
    "baseColumnName": "currency",
    "expression": "grel:value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column currency_cluster",
    "columnName": "currency_cluster"
  },
  {
    "op": "core/column-addition",
    "description": "Create column physical_description_case at index 13 based on column physical_description using expression grel:value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "physical_description_case",
    "columnInsertIndex": 13,
    "baseColumnName": "physical_description",
    "expression": "grel:value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description_case using expression value.toLowercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description_case",
    "expression": "value.toLowercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column date_timeless at index 22 based on column date using expression grel:value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "date_timeless",
    "columnInsertIndex": 22,
    "baseColumnName": "date",
    "expression": "grel:value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column date_timeless using expression grel:toString(toDate(value), \"yyyy-MM-dd\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "date_timeless",
    "expression": "grel:toString(toDate(value), \"yyyy-MM-dd\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-removal",
    "description": "Remove column sponsor",
    "columnName": "sponsor"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column sponsor_case",
    "columnName": "sponsor_case"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column sponsor_cluster to sponsor",
    "oldColumnName": "sponsor_cluster",
    "newColumnName": "sponsor"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column event",
    "columnName": "event"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column event_case",
    "columnName": "event_case"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column event_cluster to event",
    "oldColumnName": "event_cluster",
    "newColumnName": "event"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column venue",
    "columnName": "venue"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column venue_case",
    "columnName": "venue_case"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column venue_cluster to venue",
    "oldColumnName": "venue_cluster",
    "newColumnName": "venue"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column physical_description",
    "columnName": "physical_description"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column physical_description_case to physical_description",
    "oldColumnName": "physical_description_case",
    "newColumnName": "physical_description"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column occasion",
    "columnName": "occasion"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column occasion_case",
    "columnName": "occasion_case"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column occasion_cluster to occasion",
    "oldColumnName": "occasion_cluster",
    "newColumnName": "occasion"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression grel:value.replace(/[;]$/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "grel:value.replace(/[;]$/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column place_case at index 6 based on column place using expression grel:value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "place_case",
    "columnInsertIndex": 6,
    "baseColumnName": "place",
    "expression": "grel:value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place_case using expression grel:value.replace(/\\[+/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place_case",
    "expression": "grel:value.replace(/\\[+/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place_case using expression grel:value.replace(/\\]{1}/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place_case",
    "expression": "grel:value.replace(/\\]{1}/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place_case using expression grel:value.replace(/[\"]{1}/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place_case",
    "expression": "grel:value.replace(/[\"]{1}/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place_case using expression grel:value.replace(/\\({1}/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place_case",
    "expression": "grel:value.replace(/\\({1}/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place_case using expression grel:value.replace(/\\){1}/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place_case",
    "expression": "grel:value.replace(/\\){1}/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place_case using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place_case",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column place_cluster at index 7 based on column place_case using expression grel:value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "place_cluster",
    "columnInsertIndex": 7,
    "baseColumnName": "place_case",
    "expression": "grel:value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column place_cluster",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place_cluster",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico's Ny",
          "Delmonico's, Ny",
          "Delmonico's Ny?",
          "Delmonico's, N.Y.",
          "Delmonico's, Ny;",
          "Delmonicos Ny",
          "Delmonicos', Ny",
          "Delmonicos, Ny"
        ],
        "to": "Delmonico's Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico's, New York, Ny",
          "Delmonico's, New York, N.Y.",
          "Delmonicos, New York, N.Y.",
          "Delmonico's, New York, Ny;",
          "Delmonico's, New York, Ny?",
          "Delmonico's. New York, Ny",
          "Delmonicos, New York, Ny",
          "Delmonicos, New York, Ny?"
        ],
        "to": "Delmonico's, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Auditorium Hotel Chicago, Il",
          "Auditorium Hotel, Chicago, Il",
          "Auditorium Hotel , Chicago, Il",
          "Auditorium Hotel Chicago Il",
          "Auditorium Hotel, ?chicago, Il?",
          "Auditorium Hotel, Chicago Il",
          "Auditorium Hotel, Chicago, Il?"
        ],
        "to": "Auditorium Hotel Chicago, Il"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route Friedrich Der Grosse",
          "En Route - Friedrich Der Grosse",
          "En Route  Friedrich Der Grosse",
          "En Route 'friedrich Der Grosse",
          "En Route - 'friedrich Der Grosse ",
          "En Route - :friedrich Der Grosse",
          "En Route Friedrich Der Grosse "
        ],
        "to": "En Route Friedrich Der Grosse"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Brunswick Ny",
          "Brunswick Hotel Ny?",
          "Hotel Brunswick Ny?",
          "Hotel Brunswick, Ny",
          "Hotel Brunswick; Ny"
        ],
        "to": "Hotel Brunswick Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Philadelphia, Pa",
          "Philadelphia Pa",
          "Philadelphia, Pa.",
          "Philadelphia, Pa?",
          "Philadelphia. Pa"
        ],
        "to": "Philadelphia, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York, Ny",
          "New York, Ny?",
          "New York, Ny;",
          "New York Ny",
          "New York, Ny ?"
        ],
        "to": "New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The New Willard, Washington, Dc",
          "New Willard, The, Washington, Dc",
          "The New Willard Washington, Dc",
          "The New Willard, Washington Dc",
          "The New Willard, Washington, D.C."
        ],
        "to": "The New Willard, Washington, Dc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Providence, Ri",
          "Providence, R.I.",
          "Providence Ri",
          "Providence Ri?",
          "Providence, Ri?"
        ],
        "to": "Providence, Ri"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Sherry's Ny",
          "Sherry's, Ny",
          "Sherry's Ny?",
          "Sherrys, Ny"
        ],
        "to": "Sherry's Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Old Point Comfort, Va",
          "Old Point Comfort Va",
          "Old Point Comfort, Va.",
          "Old Point, Comfort, Va"
        ],
        "to": "Old Point Comfort, Va"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Manhattan, Ny",
          "Hotel Manhattan Ny",
          "Manhattan Hotel Ny",
          "Manhattan Hotel, Ny"
        ],
        "to": "Hotel Manhattan, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico's,ny",
          "Delmonico'sny",
          "Delmonico's,ny?",
          "Delmonicos,ny"
        ],
        "to": "Delmonico's, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss Friesland",
          "S.S. Friesland",
          "Ss. Friesland",
          "Ss; Friesland"
        ],
        "to": "S.S. Friesland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Auditorium, Chicago, Il",
          "The Auditorium Chicago, Il",
          "Auditorium, The, Chicago, Il",
          "The Auditorium Chicago Il"
        ],
        "to": "The Auditorium, Chicago, Il"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "San Francisco,ca",
          "San Francisco,ca;",
          "San Francisco,ca?",
          "San Francisco,ca."
        ],
        "to": "San Francisco, Ca"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route - Ss Lahn",
          "En Route -ss Lahn",
          "En Route Ss Lahn",
          "En Route _ Ss Lahn"
        ],
        "to": "En Route - SS Lahn"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York",
          "New York?",
          "New York;",
          "New York ?"
        ],
        "to": "New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Vendome, Boston, Ma",
          "Hotel Vendome, Boston, Ma;",
          "Hotel Vendome; Boston, Ma",
          "Vendome Hotel, Boston, Ma"
        ],
        "to": "Hotel Vendome, Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nassau,n.P.Bahamas",
          "Nassau,np,bahamas",
          "Nassau,n.P.,bahamas",
          "Nassau,np;bahamas"
        ],
        "to": "Nassau, NP, Bahamas"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New Algonquin Club, Boston, Ma",
          "New Algonquin Club Boston, Ma",
          "New Algonquin Club, Boston, Ma?"
        ],
        "to": "New Algonquin Club, Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pfister, Milwaukee, Wi",
          "Hotel Pfister, Milwaukee Wi",
          "Pfister Hotel, Milwaukee, Wi"
        ],
        "to": "Hotel Pfister, Milwaukee, Wi"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Savoy, New York",
          "Hotel Savoy New York",
          "Hotel Savoy; New York"
        ],
        "to": "Hotel Savoy, New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route S.S.Barbarossa",
          "En Route - S.S.Barbarossa",
          "En Route; S.S.Barbarossa"
        ],
        "to": "En Route S.S. Barbarossa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "66 St. & B'way Ny",
          "66 St. & B'way. Ny",
          "66 St. & Bway. Ny"
        ],
        "to": "66 St. & B'way Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Chicago, Il",
          "Chicago Il",
          "Chicago Il?"
        ],
        "to": "Chicago, Il"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Brooklyn,ny",
          "Brooklyn,ny?",
          "Brooklynny"
        ],
        "to": "Brooklyn, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Los Angeles,ca",
          "Los Angeles,ca;",
          "Los Angeles,ca?"
        ],
        "to": "Los Angeles, Ca"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Washington, Dc",
          "Washington, D.C.",
          "Washington Dc"
        ],
        "to": "Washington, Dc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Queen City Club, Cincinnati, Oh",
          "Queen City Club Cincinnati Oh",
          "Queen City Club Cincinnati Oh?"
        ],
        "to": "Queen City Club, Cincinnati, Oh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss City Of Rio De Janeiro",
          "S.S. City Of Rio De Janeiro",
          "Ss City Of Rio De Janeiro?"
        ],
        "to": "Ss City Of Rio De Janeiro"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "At Sea",
          "At Sea ?",
          "At Sea?"
        ],
        "to": "At Sea"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Long Beach,l.I.,ny&",
          "Long Beach,l.I.,ny;",
          "Long Beach,li,ny?"
        ],
        "to": "Long Beach, L.I., Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Waldorf, ?new York, Ny",
          "The Waldorf, New York, Ny",
          "The Waldorf, New York, Ny?"
        ],
        "to": "The Waldorf, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Manhattan Hotel, New York, Ny",
          "Hotel Manhattan, New York, Ny",
          "Hotel Manhattan, New York, Ny;"
        ],
        "to": "Manhattan Hotel, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Boston, Ma",
          "Boston Ma",
          "Boston; Ma"
        ],
        "to": "Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico's, New York City",
          "New York City, Delmonico's",
          "New York City; Delmonico's"
        ],
        "to": "Delmonico's, New York City"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Lakewood, Nj",
          "Lakewood Nj",
          "Lakewood, N.J."
        ],
        "to": "Lakewood, Nj"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Mercantile Club St Louis, Mo",
          "Mercantile Club, St Louis Mo",
          "Mercantile Club, St. Louis, Mo"
        ],
        "to": "Mercantile Club St Louis, Mo"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico's New York",
          "Delmonico's, New York",
          "Delmonicos, New York"
        ],
        "to": "Delmonico's New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ny",
          "N.Y.",
          "Ny?"
        ],
        "to": "Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss Rio De Janeiro",
          "Ss: Rio De Janeiro",
          "Ss; Rio De Janeiro"
        ],
        "to": "Ss Rio De Janeiro"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Marlborough Hotel, ?",
          "Hotel Marlborough",
          "Hotel Marlborough, ?"
        ],
        "to": "Marlborough Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Long Beach, L.I, Ny",
          "Long Beach, Li, Ny;",
          "Long Beach, L.I., Ny"
        ],
        "to": "Long Beach, L.I, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Savoy",
          "Savoy Hotel",
          "Savoy Hotel, ?"
        ],
        "to": "Hotel Savoy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Chicago,ill.",
          "Chicago,ill",
          "Chicago,ill;"
        ],
        "to": "Chicago, Il"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bellevue-stratford Hotel, Philadelphia, Pa",
          "Hotel Bellevue-stratford, Philadelphia, Pa",
          "Hotel Bellevue-stratford Philadelphia, Pa"
        ],
        "to": "Bellevue-stratford Hotel, Philadelphia, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grand Hotel, Cincinnati Oh",
          "Grand Hotel, Cincinnati, Oh",
          "Grand Hotel, Cincinnati Oh;"
        ],
        "to": "Grand Hotel, Cincinnati Oh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. Campania",
          "Rms Campania",
          "R.M.S.  Campania"
        ],
        "to": "R.M.S. Campania"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Louis, Mo",
          "St. Louis, Mo;",
          "St. Louis Mo"
        ],
        "to": "St. Louis, Mo"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Zermatt, Switzerland",
          "Zermatt Switzerland",
          "Zermatt, Switzerland?"
        ],
        "to": "Zermatt, Switzerland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Denis Hotel",
          "Hotel St. Denis",
          "St. Denis Hotel, ?"
        ],
        "to": "St. Denis Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Buffalo, Ny",
          "Buffalo, Ny?",
          "Buffalo Ny?"
        ],
        "to": "Buffalo, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Hollenden Cleveland Oh?",
          "The Hollenden, Cleveland, Oh",
          "The Hollenden, Cleveland; Oh"
        ],
        "to": "The Hollenden Cleveland Oh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss City Of Para",
          "S.S. City Of Para",
          "S.S. City Of Para'"
        ],
        "to": "Ss City Of Para"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Young's Hotel, Boston, Ma",
          "Young's Hotel, Boston Ma?",
          "Youngs Hotel, Boston, Ma"
        ],
        "to": "Young's Hotel, Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss Doric",
          "Ss Doric;",
          "S.S. Doric"
        ],
        "to": "SS Doric"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Majestic Philadelphia, Pa",
          "Hotel Majestic, Philadelphia, Pa",
          "Majestic Hotel, Philadelphia. Pa"
        ],
        "to": "Hotel Majestic Philadelphia, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico's,new York",
          "Delmonicos,new York",
          "Delmonico's.New York"
        ],
        "to": "Delmonico's, New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "San Francisco, Ca",
          "San Francisco, Ca;",
          "San Francisco, Ca?"
        ],
        "to": "San Francisco, Ca"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Atlantic City, Nj",
          "Atlantic City, N.J.",
          "Atlantic City, Nj;"
        ],
        "to": "Atlantic City, Nj"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Brunswick Hotel, Boston, Ma",
          "Hotel Brunswick, Boston, Ma",
          "Hotel Brunswick, Boston Ma"
        ],
        "to": "Brunswick Hotel, Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Clinton County, Ny",
          "Clinton County Ny",
          "Clinton County, Ny."
        ],
        "to": "Clinton County, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss Kasuga",
          "S.S. Kasuga",
          "Ss: Kasuga"
        ],
        "to": "SS Kasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Arlington, Washington, D.C.",
          "The Arlington Washington Dc?",
          "The Arlington, Washington, Dc"
        ],
        "to": "The Arlington, Washington, D.C."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Jacksonville, Fl",
          "Jacksonville, Fl;"
        ],
        "to": "Jacksonville, Fl"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Astor Hotel, New York, Ny",
          "Hotel Astor, New York, Ny"
        ],
        "to": "Astor Hotel, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Aboard Ss Kamakura Maru",
          "Aboard Ss Kamakura Maru;"
        ],
        "to": "Aboard SS Kamakura Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Parker House Boston,mass ?",
          "Parker House, Boston,mass"
        ],
        "to": "Parker House Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route H.H.Meier",
          "En Route  H.H.Meier"
        ],
        "to": "En Route H.H.Meier"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Berlin, Germany",
          "Berlin Germany"
        ],
        "to": "Berlin, Germany"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Konigin Luise",
          "Konigin Luise;"
        ],
        "to": "Konigin Luise"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Savoy Hotel, New York, Ny",
          "Hotel Savoy, New York, Ny"
        ],
        "to": "Savoy Hotel, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss: Kamakura Maru",
          "Ss; Kamakura Maru"
        ],
        "to": "Ss: Kamakura Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Lincoln Club - Ny",
          "Lincoln Club Ny"
        ],
        "to": "Lincoln Club - Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Augustine, Fla",
          "St. Augustine, Fla."
        ],
        "to": "St. Augustine, Fl"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Melbourne,australia",
          "Melbourne,australia?"
        ],
        "to": "Melbourne, Australia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Gramercy Park Hotel",
          "Hotel Gramercy Park"
        ],
        "to": "Gramercy Park Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nassau, N.P.",
          "Nassau, Np"
        ],
        "to": "Nassau, N.P."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hoffman House New York, Ny",
          "Hoffman House, New York, Ny"
        ],
        "to": "Hoffman House New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York City",
          "?new York City?"
        ],
        "to": "New York City"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Jefferson, St. Louis, Mo",
          "Jefferson Hotel, St. Louis Mo"
        ],
        "to": "Hotel Jefferson, St. Louis, Mo"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Quebec, Canada",
          "Quebec Canada"
        ],
        "to": "Quebec, Canada"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Stenton Philadelphia Pa",
          "Hotel Stenton, Philadelphia, Pa"
        ],
        "to": "Hotel Stenton Philadelphia Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. Empress Of China",
          "Rms Empress Of China"
        ],
        "to": "R.M.S. Empress Of China"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss Trinidad",
          "S.S. Trinidad"
        ],
        "to": "SS Trinidad"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "White Mountains, Nh",
          "White Mountains, Nh;"
        ],
        "to": "White Mountains, Nh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Liverpool England?}",
          "Liverpool, England"
        ],
        "to": "Liverpool, England"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Frankfurt, Germany",
          "Frankfurt, Germany?"
        ],
        "to": "Frankfurt, Germany"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss Westernland",
          "S.S. Westernland"
        ],
        "to": "SS Westernland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Portland, Me",
          "Portland Me"
        ],
        "to": "Portland, Me"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Bellevue-stratford, Philadelphia, Pa",
          "The Bellevue-stratford, Philadelphia, Pa?"
        ],
        "to": "The Bellevue-stratford, Philadelphia, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Young's Hotel",
          "Young's Hotel ?"
        ],
        "to": "Young's Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cleveland,oh",
          "Cleveland,oh?"
        ],
        "to": "Cleveland, Oh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Mechanics Hall, Boston, Ma;",
          "Mechanics' Hall, Boston, Ma"
        ],
        "to": "Mechanics Hall, Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Eagle Hotel Gettysburg, Pa?",
          "Eagle Hotel, Gettysburg, Pa"
        ],
        "to": "Eagle Hotel Gettysburg, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Del Campidoglio, New York, Ny",
          "Hotel Del Campidoglio, New York, N.Y."
        ],
        "to": "Hotel Del Campidoglio, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Aboard Ss Kasuga;",
          "Aboard Ss Kasuga"
        ],
        "to": "Aboard SS Kasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "California",
          "California?"
        ],
        "to": "California"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Clinton County,ny",
          "Clinton County.Ny"
        ],
        "to": "Clinton County, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Gramercy Park; 52 Gramercy Park North",
          "Gramercy Park Hotel; Hotel Gramercy Park; 52 Gramercy Park North"
        ],
        "to": "Hotel Gramercy Park; 52 Gramercy Park North"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Tacoma, Wa?}",
          "Tacoma; Wa"
        ],
        "to": "Tacoma, Wa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Auditorium,chicago,ill.",
          "The Auditorium,chicago,ill;"
        ],
        "to": "The Auditorium, Chicago, Il"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico's,new York,ny?",
          "Delmonico's,new York,ny"
        ],
        "to": "Delmonico's,new York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Baltimore,md",
          "Baltimore,md."
        ],
        "to": "Baltimore, Md"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route Aboard Ss Kasuga Maru",
          "En Route Aboard Ss. Kasuga Maru"
        ],
        "to": "En Route Aboard SS Kasuga Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Maxwell House, Nashville, Tn;",
          "Maxwell House, Nashville, Tn"
        ],
        "to": "Maxwell House, Nashville, Tn"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Zinzendorf, Winston-salem, Nc",
          "Zinzendorf Hotel, Winston-salem, Nc"
        ],
        "to": "Hotel Zinzendorf, Winston-salem, Nc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ormond, Fl",
          "Ormond, Fl;"
        ],
        "to": "Ormond, Fl"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nashville, Tn?",
          "Nashville, Tn"
        ],
        "to": "Nashville, Tn"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cleveland, Ohio",
          "Cleveland. Ohio"
        ],
        "to": "Cleveland, Ohio"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Ten Eyck, Albany, Ny",
          "Ten Eyck, The, Albany, Ny"
        ],
        "to": "The Ten Eyck, Albany, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Butler, Pa",
          "Butler, Pa."
        ],
        "to": "Butler, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Chicago, Ill",
          "Chicago ,ill"
        ],
        "to": "Chicago, Il"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Majestic",
          "Majestic Hotel"
        ],
        "to": "Hotel Majestic"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Chicago,il",
          "Chicago,il."
        ],
        "to": "Chicago, Il"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Astor",
          "Astor Hotel"
        ],
        "to": "Hotel Astor"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Virginia Beach, Va",
          "Virginia Beach Va"
        ],
        "to": "Virginia Beach, Va"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Savoy, Ny",
          "Hotel Savoy Ny"
        ],
        "to": "Hotel Savoy, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Detroit,mi",
          "Detroit,mi?"
        ],
        "to": "Detroit, Mi"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Manila, P.I.",
          "Manila, Pi"
        ],
        "to": "Manila, P.I."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bellevue Hotel, Philadelphia, Pa",
          "Hotel Bellevue, Philadelphia Pa"
        ],
        "to": "Bellevue Hotel, Philadelphia, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Detroit, Mi",
          "Detroit, Mi?"
        ],
        "to": "Detroit, Mi"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Petersburg,russia",
          "St. Petersburg.Russia"
        ],
        "to": "St. Petersburg, Russia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Roanoke, Va",
          "Roanoke, Va;"
        ],
        "to": "Roanoke, Va"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grand Pacific Hotel, Chicago, Il",
          "Grand Pacific Hotel Chicago, Il;"
        ],
        "to": "Grand Pacific Hotel, Chicago, Il"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico's New York,ny",
          "Delmonico's, New York,n.Y."
        ],
        "to": "Delmonico's New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cincinnati,oh",
          "Cincinnati,oh?"
        ],
        "to": "Cincinnati, Oh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Coronado Beach, Ca",
          "Coronado Beach, Ca;"
        ],
        "to": "Coronado Beach, Ca"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Montreal Canada?",
          "Montreal, Canada"
        ],
        "to": "Montreal, Canada"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nassau, N.P. Bahamas",
          "Nassau, N.P., Bahamas"
        ],
        "to": "Nassau, N.P. Bahamas"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Tampa, Fl",
          "Tampa Fl?"
        ],
        "to": "Tampa, Fl"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union League Philadelphia Pa?",
          "Union League, Philadelphia, Pa"
        ],
        "to": "Union League, Philadelphia, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Narragansett Hotel, Providence Ri",
          "Narragansett Hotel, Providence, Ri"
        ],
        "to": "Narragansett Hotel, Providence, Ri"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Raleigh, Washington, Dc",
          "The Raleigh, Washington Dc"
        ],
        "to": "The Raleigh, Washington, Dc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Horticultural Hall, Philadelphia, Pa",
          "Horticultural Hall, Philadelphia Pa"
        ],
        "to": "Horticultural Hall, Philadelphia, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Commercial Club, Portland, Or",
          "Portland Commercial Club, Portland, Or"
        ],
        "to": "Commercial Club, Portland, Or"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Wellington, Providence Ri",
          "Wellington, The, Providence, Ri"
        ],
        "to": "The Wellington, Providence Ri"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "?fla?",
          "Fla."
        ],
        "to": "Fla"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York Athletic Club",
          "New York Athletic Club, New York"
        ],
        "to": "New York Athletic Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Tampa,fla.",
          "Tampa.Fla."
        ],
        "to": "Tampa, Fl"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Boston, Mass.",
          "Boston, Mass;"
        ],
        "to": "Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel St. George, Nyack, Ny",
          "St. George Hotel, Nyack, Ny"
        ],
        "to": "Hotel St. George, Nyack, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route Aboard Ss Kobe Maru",
          "En Route Aboard Ss. Kobe Maru"
        ],
        "to": "En Route Aboard SS Kobe Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Parker House,boston,mass",
          "Parker House,boston,mass;"
        ],
        "to": "Parker House, Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Melbourne, Australia",
          "Melbourne Australia?"
        ],
        "to": "Melbourne, Australia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Lucerne,switzerland",
          "Lucerne,switzerland?"
        ],
        "to": "Lucerne, Switzerland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nos. 667 To 677 Broadway, Opposite Bond Street, Midway Between Battery And Central Park, New York Ny;",
          "Nos. 667 To 677 Broadway, Opposite Bond Street, Midway Between Battery And Central Park, New York, Ny;"
        ],
        "to": "Nos. 667 To 677 Broadway, Opposite Bond Street, Midway Between Battery And Central Park, New York Ny;"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.M.S. New York",
          "Usms New York"
        ],
        "to": "U.S.M.S. New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Washington,d.C.",
          "Washington,dc"
        ],
        "to": "Washington, DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Boston,mass",
          "Boston,mass;"
        ],
        "to": "Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copenhagen, Denmark",
          "Copenhagen Denmark?"
        ],
        "to": "Copenhagen, Denmark"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Denver, Colo.",
          "Denver, Colo;"
        ],
        "to": "Denver, Co"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Walton,philadelphia,pa",
          "Hotel Walton,philadelphia,pa;"
        ],
        "to": "Hotel Walton, Philadelphia, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. Nacoochee",
          "Ss Nacoochee"
        ],
        "to": "S.S. Nacoochee"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Rms Oceanic",
          "R.M.S. Oceanic"
        ],
        "to": "Rms Oceanic"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Argyle, The, Brooklyn, Ny",
          "The Argyle, Brooklyn, Ny"
        ],
        "to": "Argyle, The, Brooklyn, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Chamberlin's, Washington,d.C.",
          "Chamberlin's; Washington,dc?"
        ],
        "to": "Chamberlin's, Washington, DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union League Club Ny;",
          "Union League Club, Ny"
        ],
        "to": "Union League Club Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Metropolitan Club, ?new York, Ny",
          "Metropolitan Club, New York, Ny"
        ],
        "to": "Metropolitan Club, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Put-in-bay-island, Lake Erie, Oh;",
          "Put-in-bay-island, Lake Erie, Oh"
        ],
        "to": "Put-in-bay-island, Lake Erie, Oh;"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel St. Denis, Ny",
          "St. Denis Hotel; Ny"
        ],
        "to": "Hotel St. Denis, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Tontine Hotel, New Haven, Ct",
          "New Tontine Hotel, New Haven Ct"
        ],
        "to": "Tontine Hotel, New Haven, Ct"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico's",
          "Delmonicos"
        ],
        "to": "Delmonico's"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Argyle",
          "The Argyle ?"
        ],
        "to": "The Argyle"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Manhattan Beach, Long Island Ny",
          "Manhattan Beach, Long Island, Ny"
        ],
        "to": "Manhattan Beach, Long Island, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Germantown Pa?",
          "Germantown, Pa?"
        ],
        "to": "Germantown, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss Coptic",
          "S.S. Coptic"
        ],
        "to": "S.S. Coptic"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Dampfer; H.H. Meier",
          "Dampfer H.H. Meier"
        ],
        "to": "Dampfer; H.H. Meier"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Battle Creek, Mi",
          "Battle Creek, Mi;"
        ],
        "to": "Battle Creek, Mi"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Omaha Nebraska",
          "Omaha, Nebraska"
        ],
        "to": "Omaha, Nebraska"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Germany",
          "Germany?"
        ],
        "to": "Germany"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New Willard Washington, Dc",
          "New Willard, Washington, Dc"
        ],
        "to": "New Willard Washington, Dc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cincinnati , Ohio",
          "Cincinnati, Ohio"
        ],
        "to": "Cincinnati , Ohio"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Dampfer Kaiser Wilhelm Der Grosse;",
          "Dampfer Kaiser Wilhelm Der Grosse"
        ],
        "to": "Dampfer Kaiser Wilhelm Der Grosse"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ellicott Square, Buffalo, Ny",
          "Ellicott Square, Buffalo, Ny;"
        ],
        "to": "Ellicott Square, Buffalo, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Brunswick,the,boston,mass",
          "Brunswick,the,bostonmass"
        ],
        "to": "Brunswick, The, Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Convention Hall, Buffalo, Ny",
          "Convention Hall, Buffalo, Ny?"
        ],
        "to": "Convention Hall, Buffalo, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Philadelphia,pa.",
          "Philadelphia,pa"
        ],
        "to": "Philadelphia, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf-astoria Ny?",
          "Waldorf-astoria, Ny"
        ],
        "to": "Waldorf-astoria, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ascot England",
          "Ascot, England"
        ],
        "to": "Ascot England"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Logan House, Altoona, Pa",
          "Logan House; Altoona, Pa;"
        ],
        "to": "Logan House, Altoona, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Penn.",
          "Penn;"
        ],
        "to": "Penn."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Narragansett Pier R.I.",
          "Narragansett Pier, Ri"
        ],
        "to": "Narragansett Pier R.I."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Worcester, Mass",
          "Worcester, Mass;"
        ],
        "to": "Worcester, Mass"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union Club",
          "Union Club, ?"
        ],
        "to": "Union Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Adelaide, Australia",
          "Adelaide Australia?"
        ],
        "to": "Adelaide, Australia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pullman Dining Car Service En Route",
          "Pullman Dining Car Service En Route?"
        ],
        "to": "Pullman Dining Car Service En Route"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico's,new York Ny",
          "Delmonico's,new York, N.Y."
        ],
        "to": "Delmonico's, New York Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route S.S Vaderland",
          "En Route S.S. Vaderland"
        ],
        "to": "En Route S.S Vaderland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Academy Of Music Brooklyn, Ny",
          "Academy Of Music, Brooklyn, Ny"
        ],
        "to": "Academy Of Music Brooklyn, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fairmont Hotel San Francisco, Ca",
          "Fairmont Hotel, San Francisco, Ca"
        ],
        "to": "Fairmont Hotel San Francisco, Ca"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Park Row Bldg. Ny",
          "Park Row Bldg., Ny, Ny"
        ],
        "to": "Park Row Bldg. Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bellevue-stratford, Philadelphia, Pa",
          "Bellevue-stratford, Philadelphia, Pa?"
        ],
        "to": "Bellevue-stratford, Philadelphia, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St.Denis Hotel,ny",
          "St.Denis Hotelny"
        ],
        "to": "St.Denis Hotel, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Plaza",
          "Plaza, The"
        ],
        "to": "The Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route Aboard S.S. Westernland",
          "En Route Aboard S.S. Westernland;"
        ],
        "to": "En Route Aboard S.S. Westernland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Saratoga Springs, Ny",
          "Saratoga Springs, Ny."
        ],
        "to": "Saratoga Springs, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Put-in-bay, Oh",
          "Put-in-bay, Oh;"
        ],
        "to": "Put-in-bay, Oh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Auditorium",
          "Auditorium, ?"
        ],
        "to": "Auditorium"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Iroquois,buffalo,n.Y.",
          "Hotel Iroquois,buffalo,ny"
        ],
        "to": "Hotel Iroquois,buffalo, N.Y."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf-astoria, New York",
          "Waldorf-astoria New York"
        ],
        "to": "Waldorf-astoria, New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Continental Paris, France?",
          "Hotel Continental, Paris, France"
        ],
        "to": "Hotel Continental Paris, France?"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. Etruria",
          "Rms Etruria"
        ],
        "to": "R.M.S. Etruria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pawling, Ny",
          "Pawling Ny?"
        ],
        "to": "Pawling, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S.Rotterdam",
          "Rms-rotterdam"
        ],
        "to": "R.M.S.Rotterdam"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss Kaiser Wilhelm Der Grosse",
          "S.S. Kaiser Wilhelm Der Grosse"
        ],
        "to": "Ss Kaiser Wilhelm Der Grosse"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Aboard 'prinz Friedrich Wilhelm'",
          "Aboard Prinz Friedrich Wilhelm''"
        ],
        "to": "Aboard Prinz Friedrich Wilhelm"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route Aboard Above",
          "En Route Aboard Above ?"
        ],
        "to": "En Route Aboard Above"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Put-in-bay Island, Lake Erie, Oh",
          "Put-in-bay Island, Lake Erie, Oh;"
        ],
        "to": "Put-in-bay Island, Lake Erie, Oh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Russell House, Detroit, Mi",
          "Russell House; Detroit, Mi"
        ],
        "to": "Russell House, Detroit, Mi"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bar Harbor Me",
          "Bar Harbor, Me"
        ],
        "to": "Bar Harbor Me"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Schnelldampfer Auguste Victoria",
          "Schnelldampfer: Auguste Victoria"
        ],
        "to": "Schnelldampfer Auguste Victoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. Zealandia",
          "Ss Zealandia"
        ],
        "to": "S.S. Zealandia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route S.S. Zeeland",
          "En Route S.S Zeeland"
        ],
        "to": "En Route S.S. Zeeland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Arlington,wash.Dc",
          "The Arlington,wash.Dc."
        ],
        "to": "The Arlington, Washington, Dc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union League",
          "Union League?"
        ],
        "to": "Union League"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Miramar ?",
          "Miramar?"
        ],
        "to": "Miramar"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "57 Broad Street, Ny",
          "57 Broad Street - Ny"
        ],
        "to": "57 Broad Street, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cincinnati, Oh",
          "Cincinnati Oh"
        ],
        "to": "Cincinnati, Oh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route Aboard Ss. Kasuga",
          "En Route Aboard Ss Kasuga"
        ],
        "to": "En Route Aboard SS Kasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Roanoke,va",
          "Roanoke,va;"
        ],
        "to": "Roanoke, Va"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Minneapolis Club, Minneapolis, Mn",
          "Minneapolis Club; Minneapolis, Mn"
        ],
        "to": "Minneapolis Club, Minneapolis, Mn"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route Aboard S.S. Friesland",
          "En Route Aboard Ss Friesland"
        ],
        "to": "En Route Aboard S.S. Friesland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bway & 63rd St. Ny",
          "B'way & 63rd St. Ny"
        ],
        "to": "Bway & 63rd St. Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Syracuse Ny",
          "Syracuse, Ny"
        ],
        "to": "Syracuse Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Adirondacks, Ny",
          "Adirondacks Ny"
        ],
        "to": "Adirondacks, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Franconia Notch Nh",
          "Franconia Notch Nh,"
        ],
        "to": "Franconia Notch Nh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Altoona, Pa",
          "Altoona, Pa;"
        ],
        "to": "Altoona, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "139 Eighth Street Bet. Broadway And 4th Ave., New York Ny;",
          "139 Eighth Street, Bet. Broadway And 4th Ave., New York, Ny;"
        ],
        "to": "139 Eighth Street Bet. Broadway And 4th Ave., New York Ny;"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Los Angeles, Ca;",
          "Los Angeles, Ca"
        ],
        "to": "Los Angeles, Ca"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Brooklyn, Ny",
          "Brooklyn Ny"
        ],
        "to": "Brooklyn, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Milwaukee, Wi",
          "Milwaukee, Wi;"
        ],
        "to": "Milwaukee, Wi"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Windsor Hotel,ny",
          "Windsor Hotelny"
        ],
        "to": "Windsor Hotel, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Naples Italy",
          "Naples, Italy"
        ],
        "to": "Naples Italy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Krueger Auditorium Newark Nj?",
          "Krueger Auditorium, Newark, Nj"
        ],
        "to": "Krueger Auditorium, Newark, Nj"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Dining Car",
          "Dining Car;"
        ],
        "to": "Dining Car"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. Lucania",
          "Rms Lucania"
        ],
        "to": "R.M.S. Lucania"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union League Club, New York, Ny",
          "Union League Club, New York, Ny?"
        ],
        "to": "Union League Club, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Rome, Italy",
          "Rome Italy"
        ],
        "to": "Rome, Italy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Chicago Athletic Association",
          "Chicago Athletic Association;"
        ],
        "to": "Chicago Athletic Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Denis Hotel New York?",
          "St. Denis Hotel, New York"
        ],
        "to": "St. Denis Hotel New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Terrace Garden",
          "Terrace Garden,?"
        ],
        "to": "Terrace Garden"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "66th St. & Bway Ny",
          "66th St & B'way, Ny"
        ],
        "to": "66th St. & Bway Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Marlborough, New York, Ny",
          "Marlborough Hotel, New York, Ny"
        ],
        "to": "Hotel Marlborough, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "66th St And Broadway,new York,ny",
          "66th St. And Broadway;new York,ny"
        ],
        "to": "66th St And Broadway, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Charles Hotel, New Orleans La",
          "St. Charles Hotel, New Orleans, La"
        ],
        "to": "St. Charles Hotel, New Orleans La"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ellicott Club, Buffalo, Ny",
          "Ellicott Club Buffalo Ny?"
        ],
        "to": "Ellicott Club, Buffalo, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Campobello Island",
          "Campobello Island,"
        ],
        "to": "Campobello Island"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Bellevue",
          "Bellevue Hotel"
        ],
        "to": "Hotel Bellevue"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cecil Hotel, London, England",
          "Hotel Cecil, London, England"
        ],
        "to": "Cecil Hotel, London, England"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nashville, Tenn.",
          "Nashville, Tenn;"
        ],
        "to": "Nashville, Tn"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Willard, Washington, Dc",
          "Willard Hotel, Washington, Dc"
        ],
        "to": "Hotel Willard, Washington, Dc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Waldorf Astoria",
          "Waldorf Astoria, The"
        ],
        "to": "The Waldorf Astoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss Westernland, En Route",
          "Ss Westernland - En Route"
        ],
        "to": "Ss Westernland, En Route"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Narragansett Pier,r.I.",
          "Narragansett Pier,ri"
        ],
        "to": "Narragansett Pier, Ri"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cleveland, Oh",
          "Cleveland Oh"
        ],
        "to": "Cleveland, Oh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "156 Second Avenue Ny?",
          "156 Second Avenue, Ny"
        ],
        "to": "156 Second Avenue Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Taylor's Hotel, Jersey City Nj",
          "Taylor's Hotel, Jersey City, N.J."
        ],
        "to": "Taylor's Hotel, Jersey City Nj"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Paris, France",
          "Paris, France?"
        ],
        "to": "Paris, France"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Whitehall Rooms, The Hotel Metropole, London England",
          "Whitehall Rooms, The Hotel Metropole, London, England"
        ],
        "to": "Whitehall Rooms, The Hotel Metropole, London England"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Chicago Beach Hotel Chicago, Il",
          "Chicago Beach Hotel, Chicago, Il;"
        ],
        "to": "Chicago Beach Hotel Chicago, Il"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Park Row Building Ny",
          "Park Row Building, Ny"
        ],
        "to": "Park Row Building Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "London,england",
          "London,england ?"
        ],
        "to": "London, England"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grand Pacific Hotel",
          "Grand Pacific Hotel,"
        ],
        "to": "Grand Pacific Hotel"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column place_cluster",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place_cluster",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico's, New York, Ny",
          "Delmonico's New York, Ny",
          "Delmonico's, New York Ny"
        ],
        "to": "Delmonico's, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico's Ny",
          "Delmonico's, Ny"
        ],
        "to": "Delmonico's, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Washington, Dc",
          "Washington, DC"
        ],
        "to": "Washington, Dc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route S.S. Barbarossa",
          "En Route S.S Barbarossa"
        ],
        "to": "En Route S.S. Barbarossa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Walton, Philadelphia, Pa",
          "Hotel Walton, Philadelphia Pa"
        ],
        "to": "Hotel Walton, Philadelphia, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nassau, N.P. Bahamas",
          "Nassau, NP, Bahamas"
        ],
        "to": "Nassau, N.P. Bahamas"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Brunswick, The, Boston, Ma",
          "The Brunswick, Boston, Ma"
        ],
        "to": "Brunswick, The, Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Parker House, Boston, Ma",
          "Parker House Boston, Ma"
        ],
        "to": "Parker House, Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico's New York",
          "Delmonico's, New York"
        ],
        "to": "Delmonico's, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Long Beach, L.I, Ny",
          "Long Beach, L.I., Ny"
        ],
        "to": "Long Beach, L.I, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Narragansett Pier R.I.",
          "Narragansett Pier, Ri"
        ],
        "to": "Narragansett Pier R.I."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Petersburg, Russia",
          "St. Petersburg Russia?"
        ],
        "to": "St. Petersburg, Russia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Arlington, Washington, D.C.",
          "The Arlington, Washington, Dc"
        ],
        "to": "The Arlington, Washington, D.C."
      }
    ]
  },
  {
    "op": "core/column-removal",
    "description": "Remove column place",
    "columnName": "place"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column place_case",
    "columnName": "place_case"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column place_cluster to place",
    "oldColumnName": "place_cluster",
    "newColumnName": "place"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column date",
    "columnName": "date"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column date_timeless to date",
    "oldColumnName": "date_timeless",
    "newColumnName": "date"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression grel:value.replace(/\\?{1}/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "grel:value.replace(/\\?{1}/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace(/\\({1}/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace(/\\({1}/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace(/\\({1}/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace(/\\({1}/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace(/\\[{1}/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace(/\\[{1}/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace(/\\]{1}/,\"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace(/\\]{1}/,\"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace(/\\){1}/,\"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace(/\\){1}/,\"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace(/\\?{1}/,\"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace(/\\?{1}/,\"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace(/[\"]{1}/,\"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace(/[\"]{1}/,\"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace(/^[']{1}/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace(/^[']{1}/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column place",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss Friedrich Der Grosse"
        ],
        "to": "SS Friedrich Der Grosse"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression grel:value.replace(/[\\(\\)\\[\\]']/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "grel:value.replace(/[\\(\\)\\[\\]']/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression grel:value.replace(/[\"]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "grel:value.replace(/[\"]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression grel:value.replace(/\\w+[?]$/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "grel:value.replace(/\\w+[?]$/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-removal",
    "description": "Remove column location",
    "columnName": "location"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column location_cluster to location",
    "oldColumnName": "location_cluster",
    "newColumnName": "location"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression grel:value.replace(/[\\[\\]\\(\\)\"]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "grel:value.replace(/[\\[\\]\\(\\)\"]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression grel:value.replace(/[é]/, \"e\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "grel:value.replace(/[é]/, \"e\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column currency using expression grel:value.replace(/[é]/, \"e\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "currency",
    "expression": "grel:value.replace(/[é]/, \"e\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column currency using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "currency",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Tn. \\leonardo Da Vinci\\\"\""
        ],
        "to": "Tn. Leonardo Da Vinci"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace(/[\\[\\]\\(\\)\"]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace(/[\\[\\]\\(\\)\"]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. aquitania"
        ],
        "to": "R.M.S. Aquitania"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace(/[é]/,\"e\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace(/[é]/,\"e\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression grel:value.replace(/[\\[\\]\\(\\)\"]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "grel:value.replace(/[\\[\\]\\(\\)\"]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression grel:value.replace(/^[\\?]{1}/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "grel:value.replace(/^[\\?]{1}/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression grel:value.replace(/[\\?]{1}$/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "grel:value.replace(/[\\?]{1}$/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pther individual?;"
        ],
        "to": "Pther individual"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column place",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "'springside,orange, Nj;"
        ],
        "to": "Springside, Orange, Nj;"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column place",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Aboard Steamer Horicon, Lake George {ny};"
        ],
        "to": "Aboard Steamer Horicon, Lake George, Ny"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column place",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Belmar,nj"
        ],
        "to": "Belmar, Nj"
      }
    ]
  }
]
